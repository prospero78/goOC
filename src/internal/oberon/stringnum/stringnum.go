package stringnum

/*
	Модуль предоставляет потокобезопасный тип для операций с номером строки.
*/

import (
	мФмт "fmt"
	мСинх "sync"
)

//ССтрНомер -- специальный целочисленный тип для хранения номера строки исходника
type ССтрНомер int

//ТСтрНомер -- тип для операций с номером строки
type ТСтрНомер struct {
	знач     ССтрНомер
	стрНомер string
	блок     мСинх.RWMutex
}

//СтрНомерНов -- возвращает указатель  на новый ТСтрНомер
func СтрНомерНов(пСтр ССтрНомер) (номер *ТСтрНомер) {
	_номер := ТСтрНомер{}
	_номер.Уст(пСтр)
	return &_номер
}

//Уст -- установка значения номера строки
func (сам *ТСтрНомер) Уст(пНомер ССтрНомер) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if пНомер <= 0 {
		panic(мФмт.Errorf("ТСтрНомер.Уст(): ОШИБКА значение меньше 1, пНомер=[%v]\n", пНомер))
	}
	сам.знач = пНомер
	сам.стрНомер = мФмт.Sprintf("%v", пНомер)
}

//Получ -- возвращает хранимое значение номера строки
func (сам *ТСтрНомер) Получ() ССтрНомер {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.знач
}

//String -- возвращает строковое представление номера строки
func (сам *ТСтрНомер) String() string {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.стрНомер
}

//Доб -- увеличивает номер строки на +1
func (сам *ТСтрНомер) Доб() {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	сам.знач++
	сам.стрНомер = мФмт.Sprintf("%v", сам.знач)
}

//Сброс -- сбрасывает значение в "1"
func (сам *ТСтрНомер) Сброс() {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	сам.знач = 1
	сам.стрНомер = "1"
}
