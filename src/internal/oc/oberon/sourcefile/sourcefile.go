package sourcefile

/*
	Модуль предоставляет тип для чтения файла и записи его же.
*/

import (
	мФмт "fmt"
	мВв "io/ioutil"

	мЛит "../liter"
	мСп "../stringpos"
	мКонс "../пакКонсоль"
)

//СФайлИсхИмя -- специальный строковый тип для имени файла исходника
type СФайлИсхИмя string

//СИсхТекст -- специальный строковый тип для хранения исходного текста
type СИсхТекст string

//СИсхРазмер -- специальный целочисленный тип для хранения размера исходника
type СИсхРазмер int

//СИсхСтрока -- специальный строковый тип для хранения исходника строки
type СИсхСтрока string

//ТИсхФайл -- тип для работы с исходным файлом
type ТИсхФайл struct {
	размер СИсхРазмер //Размер исходника в рунах
	текст  СИсхТекст
}

//ИсхФайлНов -- возвращает указатель на новый ТИсхФайл
func ИсхФайлНов(пИмяФайла СФайлИсхИмя) (файл *ТИсхФайл) {
	мКонс.Конс.Отладить("пакИсхФайл.Новый()")
	_файл := ТИсхФайл{}
	_файл._Считать(пИмяФайла)
	return &_файл
}

//_Считать -- читает исходный файл
func (сам *ТИсхФайл) _Считать(пИмяФайла СФайлИсхИмя) {
	мКонс.Конс.Отладить("ТИсхФайл.Считать()")
	if пИмяФайла == "" {
		пИмяФайла = "./Hello.o7"
	}
	байты, ош := мВв.ReadFile(string(пИмяФайла))
	if ош != nil {
		panic(мФмт.Errorf("ТИсхФайл.Считать(): ошибки при попытке прочитать файл\n\t%v", ош))
	}

	// Строковое представление байтов
	сам.текст = СИсхТекст(string(байты))

	сам.размер = СИсхРазмер(len([]rune(сам.текст)))
	//мФмт.Printf("Текст:\n%v\nДлина: %v\n", сам.текст, сам.размер)
}

//Лит -- Возвращает литеру по номеру руны
func (сам *ТИсхФайл) Лит(пПоз мСп.ССтрПоз) (лит мЛит.СЛит, ош error) {
	if пПоз < 0 {
		return "", мФмт.Errorf("ТИсхФайл.Лит(): указатель литеры пПоз не может быть < 0\n")
	}
	if СИсхРазмер(пПоз) > сам.размер-1 {
		return "", мФмт.Errorf("ТИсхФайл.Лит(): указатель литеры пПоз больше последней литеры, пПоз=%v, размер=[%v]\n", пПоз, сам.размер)
	}
	текст := []rune(сам.текст)
	лит = мЛит.СЛит(string(текст[пПоз]))
	return лит, nil
}

//Исходник -- возвращает полностью исходный текст в отдельном срезе рун
func (сам *ТИсхФайл) Исходник() (текст СИсхТекст) {
	return сам.текст
}

//Печать -- печатает исходный файл
func (сам *ТИсхФайл) Печать() {
	мКонс.Конс.Печать(string(сам.текст))
}

//Размер -- возвращает размер исходника в рунах
func (сам *ТИсхФайл) Размер() СИсхРазмер {
	return сам.размер
}
