package litera

/*
	Модуль предоставляет потокобезопасный тип для работы с отдельной литерой.
*/

import (
	"fmt"
	мТип "oc/internal/types"
	"strings"
)

//ТЛит -- тип для работы с отдельной литерой
type ТЛит struct {
	лит   мТип.СЛит
	класс мТип.СЛитКласс //Хранит класс литеры
}

const (
	//наборы букв для перебора
	стрБуквыРус = "абвгдеёжзийклмнопрстуфхцчшщьыъэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ"
	стрБуквыАнг = "abcdefghjiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	стрБуквыВсе = стрБуквыРус + стрБуквыАнг

	//CтрЦифры -- список цифр, что могут встречаться в числах
	стрЦифры = "0123456789."

	//Различные специальные литеры, не имеющие смысла в коде
	стрСпецЛит = "`~!@#№$%^&?\\_"
	//Литеры-разделители
	стрРазделЛит = ";\n\t "
	//Литеры-скобки
	стрЛитСкобки = "(){}[]"
	//Литеры-операции
	стрЛитОпер                = "*/+-"
	кБуква     мТип.СЛитКласс = iota + 1
	кСпецЛит
	кЦифра
	кРазделит
	кСкобки
	кОперации
)

//Нов -- возвращает ссылку на новый ТЛит
func Нов(пЛит мТип.СЛит) (лит *ТЛит, ош error) {
	_лит := ТЛит{}
	if ош = _лит.Уст(пЛит); ош != nil {
		return nil, fmt.Errorf("litera.go/Нов(): ОШИБКА при установке литеры(%v)\n\t%v", пЛит, ош)
	}
	return &_лит, nil
}

// ЕслиБуква -- проверяет наличие буквы в литере
func (сам *ТЛит) ЕслиБуква() bool {
	return сам.класс == кБуква
}

// ЕслиСпецЛит -- проверяет наличие специальных литер не имеющих смысла в коде
func (сам *ТЛит) ЕслиСпецЛит() bool {
	return сам.класс == кСпецЛит
}

//ЕслиЦифра -- проверяет, что литера цифра
func (сам *ТЛит) ЕслиЦифра() bool {
	return сам.класс == кЦифра
}

//ЕслиРаделит -- проверяет, что литера разделитель
func (сам *ТЛит) ЕслиРазделит() bool {
	return сам.класс == кРазделит
}

//ЕслиСкобки -- проверяет, что литера скобка
func (сам *ТЛит) ЕслиСкобки() bool {
	return сам.класс == кСкобки
}

//ЕслиОпер -- проверяет, что литера операция
func (сам *ТЛит) ЕслиОпер() bool {
	return сам.класс == кОперации
}

//Уст -- устанавливает хранимую литеру
func (сам *ТЛит) Уст(пЛит мТип.СЛит) error {
	if пЛит == "" {
		return fmt.Errorf("ТЛит.Уст(): пЛит не может быть пустой\n")
	}
	if strings.Contains(стрБуквыВсе, string(пЛит)) {
		сам.класс = кБуква
	} else if strings.Contains(стрСпецЛит, string(пЛит)) {
		сам.класс = кСпецЛит
	} else if strings.Contains(стрЦифры, string(пЛит)) {
		сам.класс = кЦифра
	} else if strings.Contains(стрРазделЛит, string(пЛит)) {
		сам.класс = кРазделит
	} else if strings.Contains(стрЛитСкобки, string(пЛит)) {
		сам.класс = кСкобки
	} else if strings.Contains(стрЛитОпер, string(пЛит)) {
		сам.класс = кОперации
	} else {
		return fmt.Errorf("ТЛит.Уст(): ОШИБКА неизвестный класс литеры, пЛит=[%v]\n", пЛит)
	}
	сам.лит = пЛит
	return nil
}

//Получ -- возвращает хранимую литеру
func (сам *ТЛит) Получ() мТип.СЛит {
	return сам.лит
}

func (сам *ТЛит) String() string {
	return string(сам.лит)
}
