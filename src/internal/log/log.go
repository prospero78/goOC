package log

/*
	Модуль предоставляет служебное логирование для всего приложения.
*/

import (
	"fmt"
	"time"
)

//ТЛог -- операции с логами типов
type ТЛог struct {
	префикс string //Постоянный префикс для вывода
	режим   int    //Режим работы типа
}

const (
	//КОтладка -- режим отладки приложения
	КОтладка = iota
	//КИнфо -- режим информирования приложения
	КИнфо
	//КОшибки -- режим вывода только ошибок приложения
	КОшибки
)

//Нов -- возвращает указатель на новый ТЛог
func Нов(префикс string, режим int) (лог *ТЛог) {
	_лог := ТЛог{
		префикс: префикс,
		режим:   режим,
	}
	return &_лог
}

//Отладка -- печатает сообщение, если установлен режим отладки
func (сам *ТЛог) Отладка(метод string, пулАрг ...interface{}) {
	if сам.режим <= КОтладка {
		время := time.Now().Format("2006-01-02 15:04:05.000")
		fmt.Printf("ОТЛД %v %v.%v():", время, сам.префикс, метод)
		for _, арг := range пулАрг {
			fmt.Printf(" %v", арг)
		}
		fmt.Printf("\n")
	}
}

//Инфо -- печатает информацию, если установлен режим информации
func (сам *ТЛог) Инфо(метод string, пулАрг ...interface{}) {
	if сам.режим <= КИнфо {
		время := time.Now().Format("2006-01-02 15:04:05.000")
		fmt.Printf("ИНФО %v %v.%v():", время, сам.префикс, метод)
		for _, арг := range пулАрг {
			fmt.Printf(" %v", арг)
		}
		fmt.Printf("\n")
	}
}

//Паника -- генерирует панику по требованию
func (сам *ТЛог) Паника(метод string, пулАрг ...interface{}) {
	время := time.Now().Format("2006-01-02 15:04:05.000")
	fmt.Printf("ПАНИКА %v %v.%v():", время, сам.префикс, метод)
	for _, арг := range пулАрг {
		fmt.Printf(" %v", арг)
	}
	fmt.Printf("\n")
	panic("")
}
