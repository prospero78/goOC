package liter

/*
	Модуль предоставляет тест для интерфейса литеры
*/

import (
	мТест "testing"
)

var (
	лит *ТЛит
	ош  error
)

func TestЛит(тест *мТест.T) {
	_Провер := func(пЛит ULit, пКласс ULitКласс) {
		тест.Logf("_Провер(): пЛит=%v пКласс=%v\n", пЛит, пКласс)
		знач := лит.Получ()
		if знач != пЛит {
			тест.Errorf("_Провер(): ERROR знач(%v)!=пЛит(%v)\n", знач, пЛит)
		}
	}
	_Создать := func() {
		тест.Logf("п1 Сощдание литеры\n")
		if лит = ЛитераНов(); лит == nil {
			тест.Errorf("п1.2 ERROR лит не должна быть nil\n")
		}
		_Провер("", кПусто)
	}
	_Позитив := func() {
		_Создать()
		{ //2 Проверка начальных значений
			тест.Logf("п2 Проверка начальных значений\n")
			if лит.Получ() != "" {
				тест.Errorf("п2.1 ERROR при хранении пустой литеры, пЛит=[%v]\n", лит)
			}
			if лит.IsDigit() {
				тест.Errorf("п2.2 ERROR при хранении пустой литеры\n")
			}
			if лит.IsSpecLetter() {
				тест.Errorf("п2.2 ERROR при хранении пустой литеры\n")
			}
			if лит.IsLetter() {
				тест.Errorf("п2.3 ERROR при хранении пустой литеры\n")
			}
		}
		{ //3 Установка буквы
			тест.Logf("п3 Установка буквы\n")
			лит.Уст("Б")
			if лит.IsDigit() {
				тест.Errorf("п3.2 ERROR при хранении буквы\n")
			}
			if лит.IsSpecLetter() {
				тест.Errorf("п3.3 ERROR при хранении буквы\n")
			}
			if !лит.IsLetter() {
				тест.Errorf("п3.4 ERROR при хранении буквы \"Б\", знач=[%v]\n", лит)
			}
		}
		{ //4 Установка цифры
			тест.Logf("п4 Установка цифры\n")
			лит.Уст("8")
			if !лит.IsDigit() {
				тест.Errorf("п4.2 ERROR при хранении цифры \"8\", знач=[%v]\n", лит)
			}
			if лит.IsSpecLetter() {
				тест.Errorf("п4.3 ERROR при хранении цифры\n")
			}
			if лит.IsLetter() {
				тест.Errorf("п4.4 ERROR при хранении цифры\n")
			}
		}
		{ //5 Установка спецлитеры
			тест.Logf("п5 Установка спецлитеры\n")
			лит.Уст("_")
			if лит.IsDigit() {
				тест.Errorf("п5.2 ERROR при хранении спецлитеры\n")
			}
			if !лит.IsSpecLetter() {
				тест.Errorf("п5.3 ERROR при хранении спецлитеры\"_\", знач=[%v]\n", лит)
			}
			if лит.IsLetter() {
				тест.Errorf("п5.4 ERROR при хранении цифры\n")
			}
		}
		{ //6 Проверка строкового представления
			тест.Logf("п6 Проверка строкового представления\n")
			if лит.String() != "_" {
				тест.Errorf("п6 ERROR в строковом представлении, знач=[%v]\n", лит)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание литеры
			тест.Logf("н1 Сощдание литеры\n")
			if лит = ЛитераНов(); лит == nil {
				тест.Errorf("н1.2 ERROR лит не должна быть nil\n")
			}
		}
		_ПустоУст := func() {
			тест.Logf("н2 Пустое присвоение\n")
			defer func() {
				if паника := recover(); паника == nil {
					тест.Errorf("_ПустоУст(): ERROR при генерации пустой паники\n")
				}
			}()
			лит.Уст("")
		}
		_КриваяЛит := func() {
			тест.Logf("н3 Запрещённое присвоение\n")
			defer func() {
				if паника := recover(); паника == nil {
					тест.Errorf("_КриваяЛит(): ERROR при генерации пустой паники\n")
				}
			}()
			лит.Уст("\t")
		}
		_ПустоУст()
		_КриваяЛит()
	}
	_Позитив()
	_Негатив()
}
