package liter

/*
	Модуль предоставляет потокобезопасный тип для работы с отдельной литерой.
*/

import (
	мФмт "fmt"
	мСтр "strings"
	мСинх "sync"
)

//ULit -- специальный строковый тип для хранения литеры исходного текста
type ULit string

//ULitКласс -- специальный целочисленный класс для хранения признака класса литеры
type ULitКласс int

//ТЛит -- тип для работы с отдельной литерой
type ТЛит struct {
	лит    ULit
	цКласс ULitКласс //Хранит класс литеры
	блок   мСинх.Mutex
}

const (
	//наборы букв для перебора
	стрБуквыРус = "абвгдеёжзийклмнопрстуфхцчшщьыъэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ"
	стрБуквыАнг = "abcdefghjiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	стрБуквыВсе = стрБуквыРус + стрБуквыАнг

	//CтрЦифры -- список цифр, что могут встречаться в числах
	стрЦифры = "0123456789."

	//Различные специальные литеры, не имеющие смысла в коде
	стрСпецЛит           = "`~!@#№$%^&?\\_"
	кПусто     ULitКласс = iota + 1
	кБуква
	кСпецЛит
	кЦифра
)

//ЛитераНов -- возвращает указатель на новый ТЛит
func ЛитераНов() (лит *ТЛит) {
	return &ТЛит{}
}

// IsLetter -- проверяет наличие буквы в литере
func (сам *ТЛит) IsLetter() bool {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if сам.цКласс == кБуква {
		return true
	}
	return false
}

// IsSpecLetter -- проверяет наличие специальных литер не имеющих смысла в коде
func (сам *ТЛит) IsSpecLetter() bool {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if сам.цКласс == кСпецЛит {
		return true
	}
	return false
}

//IsDigit -- проверяет, что литера цифра
func (сам *ТЛит) IsDigit() bool {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if сам.цКласс == кЦифра {
		return true
	}
	return false
}

//Уст -- устанавливает хранимую литеру
func (сам *ТЛит) Уст(пЛит ULit) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if пЛит == "" {
		panic(мФмт.Errorf("ТЛит.Уст(): пЛит не может быть пустой\n"))
	}
	сам.лит = пЛит
	if мСтр.Contains(стрБуквыВсе, string(пЛит)) {
		сам.цКласс = кБуква
		return
	}
	if мСтр.Contains(стрСпецЛит, string(пЛит)) {
		сам.цКласс = кСпецЛит
		return
	}
	if мСтр.Contains(стрЦифры, string(пЛит)) {
		сам.цКласс = кЦифра
		return
	}
	panic(мФмт.Errorf("ТЛит.Уст(): ОШИБКА неизвестный класс литеры, пЛит=[%v]\n", пЛит))
}

//Получ -- возвращает хранимую литеру
func (сам *ТЛит) Получ() ULit {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	return сам.лит
}

func (сам *ТЛит) String() string {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	return мФмт.Sprint(сам.лит)
}
