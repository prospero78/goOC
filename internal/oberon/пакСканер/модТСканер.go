package пакСканер

/*
	Предоставляет тип сканера для обработки текста на входе.
	Сканер служит для первичного сканирования текста.
	Он же проверяет правильность поступления слов из исходного текста.
*/

import (
	мФмт "fmt"

	мИсх "../пакИсходник"
	мИф "../пакИсходникФайл"
	мКонс "../пакКонсоль"
	мКонст "../пакКонстанта"
	мОш "../пакОшибка"
	мСлово "../пакСлово"
)

//ТСканер -- тип распознаёт слова в исходнике
type ТСканер struct {
	импорт []мСлово.IWord
	Импорт []мСлово.IWord
	Ош     *мОш.ТОшибка
	Конст  []*мКонст.ТКонстанта
	исх    мИсх.ИИсходник
}

//СканерНов -- возвращает ссылку на новый ТСканер
func СканерНов(пФайл мИф.UFileSourceName) (сканер IScanner, ош error) {
	мКонс.Конс.Отладить("СканерНов()")
	_сканер := &ТСканер{}
	if _сканер == nil {
		return nil, мФмт.Errorf("СканерНов(): нет памяти?")
	}
	if _сканер.исх, ош = мИсх.ИсходникНов(пФайл); ош != nil {
		return nil, мФмт.Errorf("СканерНов(): ошибка при создании ТуИсходник\n\t%v", ош)
	}
	if _сканер.Ош, ош = мОш.ОшибкаНов("ТСканер"); ош != nil {
		return nil, мФмт.Errorf("СканерНов(): ошибка при создании ТОшибка\n\t%v", ош)
	}

	return _сканер, nil
}

//Обработать -- выполняет обработку исходника
func (сам *ТСканер) Обработать(пИмяФайла мИф.UFileSourceName) (ош error) {
	мКонс.Конс.Отладить("ТСканер.Обработать()")
	if ош = сам.исх.Обработать(пИмяФайла); ош != nil {
		return мФмт.Errorf("ТСканер.Обработать(): ошибка при обработке исходника\n\t%v", ош)
	}
	return nil
}

//Слова -- возвращает все слова в модуле
func (сам *ТСканер) Слова() map[мСлово.UWordNum]мСлово.IWord {
	return сам.исх.Слова()
}
