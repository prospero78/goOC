package pullsourcestr

/*
	Модуль предоставляет тест для пула строк исходника
*/

import (
	мТест "testing"
)

const (
	текстИсх = `МОДУЛЬ Тест;
	(* проверка на вшивость)*
	КОНЕЦ Тест.`
	стрИсх = "МОДУЛЬ Тест;"
)

var (
	пул *TPoolSource
	ош  error
)

func TestИсхСтроки(тест *мТест.T) {
	_Создать := func() {
		тест.Logf("_Создать()\n")
		if пул = New(текстИсх, 0); пул == nil {
			тест.Errorf("_Создать(): ERROR пул не должен быть nil\n")
		}
	}
	_Позитив := func() {
		{ //2 Проверка значений
			тест.Logf("п2 Проверка значений\n")
			if len(пул.GetPool()) != 3 {
				тест.Errorf("п2 ERROR при хранении числа пула строк(~3), знач=%v\n",
					len(пул.GetPool()))
			}
		}
		{ //4 Получение строки по номеру
			тест.Logf("п4.1 Получение строки по номеру\n")
			строка, ош := пул.GetString(1)
			if ош != nil {
				тест.Errorf("п4.1 ERROR при получении строки по номеру(1)\n\t%v", ош)
			}
			if строка.String() != стрИсх {
				тест.Errorf("п4.1 ERROR при получении строки по номеру(1, [%v]), знач=[%v]\n", стрИсх,
					строка.String())
			}
		}
	}
	_НетСтроки := func() {
		тест.Logf("_НетСтроки()\n")
		{ //Сбой-1
			if _, ош := пул.GetString(0); ош == nil {
				тест.Errorf("_НетСтроки(): Сбой-1 ERROR ош==nil\n")
			}
		}
		{ //Сбой-2
			if _, ош := пул.GetString(4); ош == nil {
				тест.Errorf("_НетСтроки(): Сбой-2 ERROR ош==nil\n")
			}
		}
	}
	_Создать()
	_Позитив()
	_НетСтроки()
}
