package word

/*
	Модуль предоставляет тип для хранения слова со всеми атрибутами.
*/

import (
	"fmt"
	мЛит "oc/internal/app/module/scannerword/litera"
	мПулКлюч "oc/internal/app/module/scannerword/word/pullkeyword"
	мТип "oc/internal/types"
)

//ТСлово -- операции со словами
type ТСлово struct {
	стрИсх   мТип.ISourceString //Строка исходника
	стрСлово мТип.UWord         //Само слово
	коорд    мТип.ICoordFix     //Координаты слова
	лит      мТип.ILit          //Вспомогательная литера на проверка слова
}

//Нов -- возвращает указатель на новый ТСлово
func Нов(пКоорд мТип.ICoordFix, пСлово мТип.UWord,
	пСтрИсх мТип.ISourceString) (слово *ТСлово, ош error) {
	{ //Предусловия
		if пКоорд == nil {
			return nil, fmt.Errorf("word.go/Нов(): ERROR пКоорд==nil")
		}
		if пСлово == "" {
			return nil, fmt.Errorf("word.go/Нов(): ERROR пСлово==''")
		}
		if пСтрИсх == nil {
			return nil, fmt.Errorf("word.go/Нов(): ERROR пСтрИсх==nil\n")
		}
	}
	_слово := ТСлово{
		стрИсх:   пСтрИсх,
		стрСлово: пСлово,
		коорд:    пКоорд,
	}
	if _слово.лит, ош = мЛит.New("+"); ош != nil {
		return nil, fmt.Errorf("word.go/Нов(): ERROR при создании литеры\n\t%v", ош)
	}
	return &_слово, nil
}

// Проверяет, что строка не находится в ключевых словах
func (сам *ТСлово) _ЕслиКлючевоеСлово() bool {
	return мПулКлюч.ПулКлюч.КлючНайти(мТип.UWordKey(сам.стрСлово))
}

// Проверяет, что литера не находится в списке запрещённых (для имён сущностей)
func (сам *ТСлово) _ЕслиЛитЗапрещена(пРуна rune) bool {
	пулЗапрет := []rune("\"~`!@$%^&*()-=+{}[]|\\<,>?/№;:\t\n'\r ")
	for _, руна := range пулЗапрет {
		if пРуна == руна {
			return true
		}
	}
	return false
}

//IsName -- проверяет. что строка обладает строгим соответствием для имени сущности
func (сам *ТСлово) IsName() bool {
	if сам._ЕслиКлючевоеСлово() {
		return false
	}
	лит := string(сам.стрСлово[0])
	if !(лит == "_" || сам.лит.IsLetter()) {
		return false
	}
	for _, руна := range сам.стрСлово {
		// Точка в имени -- допустимо, но здесь её не будет.
		if сам._ЕслиЛитЗапрещена(руна) {
			return false
		}
	}
	return true
}

//Слово -- возвращает слово, которое хранит тип
func (сам *ТСлово) Слово() мТип.UWord {
	return сам.стрСлово
}

// Строка -- возвращает строку исходника, содержащую подстроку
func (сам *ТСлово) Строка() мТип.UStringSource {
	return сам.стрИсх.String()
}
