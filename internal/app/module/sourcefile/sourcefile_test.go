package sourcefile

/*
	Модуль предоставляет тест для типа исходного файла
*/

import (
	"io/ioutil"
	мТест "testing"
)

const (
	стрФайл = "./test.o7"
)

var (
	исхФайл *ТФайлИсх
	ош      error
)

func TestИсходникФайл(тест *мТест.T) {
	_СбойИмяПустое := func() {
		тест.Logf("_СбойИмяПустое()\n")
		if исхФайл, ош = New("", 0); ош == nil {
			тест.Errorf("_СбойИмяПустое(): ERROR ош==nil\n")
		}
		if исхФайл != nil {
			тест.Errorf("_СбойИмяПустое(): ERROR исхФайл должен быть nil\n")
		}
	}
	_СбойФайлаНет := func() {
		тест.Logf("_СбойФайлаНет()\n")
		if исхФайл, ош = New("./notExist.o7", 0); ош == nil {
			тест.Errorf("_СбойФайлаНет(): ERROR ош==nil\n")
		}
		if исхФайл != nil {
			тест.Errorf("_СбойФайлаНет(): ERROR исхФайл должен быть nil\n")
		}
	}
	_Создать := func() {
		тест.Logf("_Создать()\n")
		if исхФайл, ош = New(стрФайл, 0); ош != nil {
			тест.Errorf("_Создать(): ERROR ош!=nil\n\t%v", ош)
		}

		if исхФайл == nil {
			тест.Errorf("_Создать(): ERROR ИсхФайл==nil\n")
		}
		if исхФайл.Размер() != 2593 {
			тест.Errorf("_Создать(): ERROR при проверке размера текста исходника(2593), размер=[%v]\n", исхФайл.Размер())
		}
	}
	_Лит := func() {
		тест.Logf("_Лит()\n")
		лит, ош := исхФайл.Лит(36)
		if ош != nil {
			тест.Errorf("_Лит(): ERROR при проверке литеры в позиции 36(ж), \n\t%v", ош)
		}
		if лит != "н" {
			тест.Errorf("_Лит(): ERROR при проверке литеры в позиции(36, н), лит=[%v]\n", лит)
		}
	}
	_ЛитНет1 := func() {
		тест.Logf("_ЛитНет1()\n")
		лит, ош := исхФайл.Лит(100000)
		if ош == nil {
			тест.Errorf("_ЛитНет1(): ERROR при проверке литеры в указанной позиции\n")
		}
		if лит != "" {
			тест.Errorf("_ЛитНет1(): ERROR при проверке литеры в указанной позиции\n")
		}
	}
	_ЛитНет2 := func() {
		{ //4 Проверка литеры с отрицательной позицией
			тест.Logf("_ЛитНет2\n")
			лит, ош := исхФайл.Лит(-5)
			if ош == nil {
				тест.Errorf("_ЛитНет2(): ERROR при проверке литеры в указанной позиции\n")
			}
			if лит != "" {
				тест.Errorf("_ЛитНет2(): ERROR при проверке литеры в указанной позиции\n")
			}
		}
	}
	_Исх := func() {
		тест.Logf("_Исх()\n")
		байты, _ := ioutil.ReadFile(стрФайл)
		if string(байты) != string(исхФайл.Исходник()) {
			тест.Errorf("_Исх(): ERROR прочитанный файл не совпал с полученным\n")
		}
	}
	_СбойИмяПустое()
	_СбойФайлаНет()
	_Создать()
	_Лит()
	_ЛитНет1()
	_ЛитНет2()
	_Исх()
}
