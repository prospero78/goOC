package пакПулИсхСтроки

/*
	Модуль предоставляет тест для пула строк исходника
*/

import (
	мТест "testing"
)

const (
	текстИсх = `МОДУЛЬ Тест;
	(* проверка на вшивость)*
	КОНЕЦ Тест.
	`
	стрИсх = "МОДУЛЬ Тест;"
)

var (
	пул ИПулИсхСтроки
	ош  error
)

func TestИсхСтроки(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание пула строк
			тест.Logf("п1 Создание пула строк\n")
			if пул, ош = ПулИсхСтрокиНов(); ош != nil {
				тест.Errorf("п1.1 ОШИБКА при создании пула строк исходника\n\t%v", ош)
			}
			if пул == nil {
				тест.Errorf("п1.2 ОШИБКА пул не должен быть nil\n")
			}
		}
		{ //2 Проверка исходных значений
			тест.Logf("п2 Проверка исходных значений\n")
			if len(пул.СтрокиВсе()) != 0 {
				тест.Errorf("п2 ОШИБКА при начальном хранении пула строк\n")
			}
		}
		{ //3 Разбиение на строки
			тест.Logf("п3 Разбиение на строки\n")
			if ош = пул.НаСтрокиРазбить(текстИсх); ош != nil {
				тест.Errorf("п3.1 ОШИБКА при разбиении на строки\n\t%v", ош)
			}
		}
		{ //4 Получение строки по номеру
			тест.Logf("п4.1 Получение строки по номеру\n")
			строка, ош := пул.Строка(1)
			if ош != nil {
				тест.Errorf("п4.1 ОШИБКА при получении строки по номеру(1)\n\t%v", ош)
			}
			if строка.Строка() != стрИсх {
				тест.Errorf("п4.1 ОШИБКА при получении строки по номеру(1, [%v]), знач=[%v]\n", стрИсх, строка)
			}
		}
	}
	_Позитив()
}
