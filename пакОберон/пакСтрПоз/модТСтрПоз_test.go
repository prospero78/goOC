package пакСтрПоз

/*
	Модуль предоставляет тест для позиции в строке исходника
*/

import (
	мТест "testing"
)

var (
	поз  ИСтрПоз
	позИзм ИСтрПозИзм
	ош     error
	ок     bool
)

func TestПозСтр(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание поз в строке
			тест.Logf("п1 Создание поз в строке\n")
			if поз, ош = СтрПозНов(); ош != nil {
				тест.Errorf("п1.1 ОШИБКА при создании поз в строке\n\t%v", ош)
			}
			if поз == nil {
				тест.Errorf("п1.2 ОШИБКА поз строки не может быть nil\n")
			}
		}
		{ //2
			тест.Logf("п2 Проверка начальных значений\n")
			if поз.Знач() != 0 {
				тест.Errorf("п2.1 ОШИБКА поз строки должен быть 0, знач=[%v]\n", поз.Знач())
			}
			if поз.String() != "0" {
				тест.Errorf("п2.2 ОШИБКА строковое представление поз в строке должен быть (0), стр=[%v]\n", поз)
			}
		}
		{ //3
			тест.Logf("п3 Установка значения поз в строке\n")
			if ош = поз.Уст(11); ош != nil {
				тест.Errorf("п3.1 ОШИБКА при установке поз в строке\n\t%v", ош)
			}
			if поз.Знач() != 11 {
				тест.Errorf("п3.2 ОШИБКА поз строки должен быть 11, знач=[%v]\n", поз)
			}
			if поз.String() != "11" {
				тест.Errorf("п3.3 ОШИБКА строковое представление поз в строке должен быть (11), стр=[%v]\n", поз)
			}
		}
		{ //4
			тест.Logf("п4 Повторная установка значения поз в строке\n")
			if ош = поз.Уст(21); ош == nil {
				тест.Errorf("п4.1 ОШИБКА при установке поз в строке\n\t%v", ош)
			}
			if поз.Знач() != 11 {
				тест.Errorf("п4.2 ОШИБКА поз строки должен быть 11, знач=[%v]\n", поз)
			}
			if поз.String() != "11" {
				тест.Errorf("п4.3 ОШИБКА строковое представление поз в строке должен быть (11), стр=[%v]\n", поз)
			}
		}
		{ //5
			тест.Logf("п5 Преобразование типа к изменяемому\n")
			if позИзм, ок = поз.(ИСтрПозИзм); !ок {
				тест.Errorf("п5.1 ОШИБКА при приведении фиксированного поз в строке к изменяемому\n")
			}
			тест.Logf("н3 результат кастинга, ок=[%v]\n", ок)
			позИзм.Доб()
			if позИзм.Знач() != 12 {
				тест.Errorf("п5.2 ОШИБКА поз строки должен быть 12, знач=[%v]\n", позИзм)
			}
			if позИзм.String() != "12" {
				тест.Errorf("п5.3 ОШИБКА строковое представление поз в строке должен быть (12), стр=[%v]\n", позИзм)
			}
			тест.Logf("п5а Проверка значения исходного типа\n")
			if поз.Знач() != 12 {
				тест.Errorf("п5.4 ОШИБКА поз строки должен быть 12, знач=[%v]\n", поз)
			}
			if поз.String() != "12" {
				тест.Errorf("п5.5 ОШИБКА строковое представление поз в строке должен быть (12), стр=[%v]\n", поз)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание поз в строке
			тест.Logf("н1 Создание поз в строке\n")
			if поз, ош = СтрПозНов(); ош != nil {
				тест.Errorf("н1.1 ОШИБКА при создании поз в строке\n\t%v", ош)
			}
			if поз == nil {
				тест.Errorf("н1.2 ОШИБКА поз строки не может быть nil\n")
			}
		}
		{ //2
			тест.Logf("н2 Установка нулевого значения поз в строке\n")
			if ош = поз.Уст(-1); ош == nil {
				тест.Errorf("н2.1 ОШИБКА при установке поз в строке\n")
			}
			if поз.Знач() != 0 {
				тест.Errorf("н2.2 ОШИБКА поз строки должен быть 0, знач=[%v]\n", поз.Знач())
			}
			if поз.String() != "0" {
				тест.Errorf("н2.3 ОШИБКА строковое представление поз в строке должен быть (0), стр=[%v]\n", поз)
			}
		}
	}
	_Позитив()
	_Негатив()
}
