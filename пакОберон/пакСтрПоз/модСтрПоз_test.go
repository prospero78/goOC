package пакСтрПоз

/*
	Модуль предоставляет тест для позиции в строке исходника
*/

import (
	мТест "testing"
)

var (
	позФикс ИСтрПозФикс
	позИзм  ИСтрПозИзм
	ош      error
	ок      bool
)

func TestПозСтрФикс(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание фиксированной координаты
			тест.Logf("1 Создание фиксированной координаты\n")
			if позФикс, ош = СтрПозФиксНов(11); ош != nil {
				тест.Errorf("п1.1 ОШИБКА при создании фиксированной координаты\n\t%v", ош)
			}
			if позФикс == nil {
				тест.Errorf("п1.2 ОШИБКА поз не может быть nil\n")
			}
		}
		{ //1 Проверка начальных значений
			тест.Logf("п2 Проверка начальных значений\n")
			if позФикс.Получ() != 11 {
				тест.Errorf("п2.1 ОШИБКА поз строки должен быть 11, знач=[%v]\n", позФикс.Получ())
			}
			if позФикс.String() != "11" {
				тест.Errorf("п2.2 ОШИБКА строковое представление поз в строке должен быть (11), стр=[%v]\n", позФикс)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание фиксированной координаты с отрицаительным значением
			тест.Logf("1 Создание фиксированной координаты с отрицательным значением\n")
			if позФикс, ош = СтрПозФиксНов(-1); ош == nil {
				тест.Errorf("н1.1 ОШИБКА при создании фиксированной координаты\n")
			}
			if позФикс != nil {
				тест.Errorf("н1.2 ОШИБКА поз должен быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}

func TestПозСтрИзм(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание изменяемой позиции в строке
			тест.Logf("п1 Создание изменяемой позиции в строке\n")
			if позИзм, ош = СтрПозИзмНов(10); ош != nil {
				тест.Errorf("п1.1 ОШИБКА при создании изменяемой позиции в строке\n\t%v", ош)
			}
			if позИзм == nil {
				тест.Errorf("п1.2 ОШИБКА поз не может быть nil\n")
			}
		}
		{ //2 Проверка наальных значений
			тест.Logf("п2 Проверка начальных значений\n")
			if позИзм.Получ() != 10 {
				тест.Errorf("п2.1 ОШИБКА при хранении начального значения(10), знач=%v\n", позИзм.Получ())
			}
			if позИзм.String() != "10" {
				тест.Errorf("п2.2 ОШИБКА при хранении строкового значения(11), знач=%s", позИзм)
			}
		}
		{ //3 Установка значения
			if ош = позИзм.Уст(11); ош != nil {
				тест.Errorf("п3.1 ОШИБКА при присвоении изменяемому поз\n\t%v", ош)
			}
			if позИзм.Получ() != 11 {
				тест.Errorf("п3.2 ОШИБКА поз строки должен быть 11, знач=[%v]\n", позИзм.Получ())
			}
			if позИзм.String() != "11" {
				тест.Errorf("п3.3 ОШИБКА строковое представление поз в строке должен быть (11), стр=[%v]\n", позИзм)
			}

		}
		{ //4 Добавление значения
			тест.Logf("п4 Добавление значения\n")
			позИзм.Доб()
			if позИзм.Получ() != 12 {
				тест.Errorf("п4.4 ОШИБКА поз строки должен быть 12, знач=[%v]\n", позИзм.Получ())
			}
			if позИзм.String() != "12" {
				тест.Errorf("п4.5 ОШИБКА строковое представление поз в строке должен быть (12), стр=[%v]\n", позИзм)
			}
		}
		{ //5 Сброс позиции
			тест.Logf("п5 Сброс позиции в строке\n")
			позИзм.Сброс()
			if позИзм.Получ() != 0 {
				тест.Errorf("п5.1 ОШИБКА позиция в строке должен быть 0, знач=[%v]\n", позИзм.Получ())
			}
			if позИзм.String() != "0" {
				тест.Errorf("п5.2 ОШИБКА строковое представление позиции в строке должен быть (0), стр=[%v]\n", позИзм)
			}
		}

	}
	_Негатив := func() {
		{ //1 Создание изменяемой координаты с отрицаительным значением
			тест.Logf("1 Создание изменяемой координаты с отрицательным значением\n")
			if позИзм, ош = СтрПозИзмНов(-1); ош == nil {
				тест.Errorf("н1.1 ОШИБКА при создании изменяемой координаты\n")
			}
			if позИзм != nil {
				тест.Errorf("н1.2 ОШИБКА позИзм должен быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}
