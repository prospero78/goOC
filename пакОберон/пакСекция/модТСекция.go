package пакСекция

/*
	Модуль предоставляет тип секции (общий для всех секций)
*/

import (
	мИнт "../пакИнтерфейсы"
	мФмт "fmt"
)

//ТСекция -- базовый тип для всех секций
type ТСекция struct {
	имя         мИнт.ССекцияИмя //заданное имя секции
	словаМодуля map[мИнт.ССловоНомерМодуль]мИнт.ИСлово
	стрТип      string //Хранит имя секциии (для модуля -- "МОДУЛЬ")
}

//СекцияНов -- создаёт и возвращает новый объект типа секции
func СекцияНов(пИмя string) (секция *ТСекция, ош error) {
	секция = &ТСекция{стрТип: пИмя}
	if секция == nil {
		return nil, мФмт.Errorf("СекцияНов(): нет памяти под новую секцию?\n")
	}
	секция.словаМодуля = make(map[мИнт.ССловоНомерМодуль]мИнт.ИСлово)
	return секция, nil
}

//Имя -- возвращает имя секции
func (сам *ТСекция) Имя() мИнт.ССекцияИмя {
	return сам.имя
}

// СловаМодуля -- возвращает список слов модуля
func (сам *ТСекция) СловаМодуля() map[мИнт.ССловоНомерМодуль]мИнт.ИСлово {
	return сам.словаМодуля
}

// СловаУст -- устанавливает список слов секции (модуль тоже своего рода секция)
func (сам *ТСекция) СловаУст(пСлова map[мИнт.ССловоНомерМодуль]мИнт.ИСлово) error {
	if пСлова == nil {
		return мФмт.Errorf("ТСекияя.словаУст(): пСлова не может быть nil\n")
	}
	сам.словаМодуля = пСлова
	return nil
}
