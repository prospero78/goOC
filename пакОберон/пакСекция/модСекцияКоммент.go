package пакСекция

// модКоммент

/*
	Выделение комментариев необходимо для (возможного) дальнейшего анализа
	комментариев на наличие опций компилятора.
	Это псевдосекция.
*/

import (
	мИнт "../пакИнтерфейсы"
	мКонс "../пакКонсоль"
	мФмт "fmt"
)

//ТСекцияКоммент -- тип псевдосекции со словами комментария
type ТСекцияКоммент struct {
	секция мИнт.ИСекция
	модуль мИнт.ИСекция
}

//СекцияКомментНов -- возвращает новый экземпляр типа псевдосекции комментариев
func СекцияКомментНов() (коммент *ТСекцияКоммент, ош error) {
	мКонс.Конс.Отладить("СекцияКомментНов()")
	коммент = &ТСекцияКоммент{}
	if коммент.секция, ош = СекцияНов("КОММЕНТ"); ош != nil {
		return nil, мФмт.Errorf("СекцияКомментНов(): ошибка при создании секции комментариев\n\t%v", ош)
	}
	if коммент.модуль, ош = СекцияНов("МОДУЛЬ"); ош != nil {
		return nil, мФмт.Errorf("СекцияКомментНов(): ошибка при создании секции модуля\n\t%v", ош)
	}
	return коммент, nil
}

//Обработать -- главный обработчик секции
func (сам *ТСекцияКоммент) Обработать(пСловаМодуля map[int]мИнт.ИСлово) (ош error) {
	цНомерИсх, цУровень := 0, 0
	слКоммент := make(map[int]мИнт.ИСлово)
	слМодуль := make(map[int]мИнт.ИСлово)
	адрМодуль := 0
	адрКоммент := 0
	for цНомерИсх = 0; цНомерИсх < len(пСловаМодуля); цНомерИсх++ {
		слово := пСловаМодуля[цНомерИсх]
		//пакКонс.Конс.Отладить("Слово: " + слово.Строка())
		стрСлово := слово.Строка()
		if стрСлово == "(*" {
			цУровень++
			continue
			//пакКонс.Конс.Отладить("Уровень комментов: " + мФмт.Sprintf("%v", цУровень))
		}
		стрСлово = слово.Строка()
		if стрСлово == "*)" {
			цУровень--
			continue
		}
		//пакКонс.Конс.Отладить("Уровень комментов: " + мФмт.Sprintf("%v", цУровень))
		стрСлово = слово.Строка()
		//Заполнение словарей в зависимости от уровня комментариев
		if цУровень == 0 {
			слМодуль[адрМодуль] = слово
			адрМодуль++
		} else {
			слКоммент[адрКоммент] = слово
			адрКоммент++
		}
	}
	if цУровень != 0 {
		return мФмт.Errorf("ТуКоммент.Обработать(): уровень комментариев на сбалансирован, уровень = %v", цУровень)
	}
	мКонс.Конс.Отладить(мФмт.Sprintf("Итоговый уровень комментов > [%v].   Всего слов > [%v].", цУровень, len(слКоммент)))
	мКонс.Конс.Отладить(мФмт.Sprintf("Слов модуля: %v   Всего слов в модуле: %v", len(слМодуль), len(слКоммент)+len(слМодуль)))
	сам.секция.СловаУст(слКоммент)
	сам.модуль.СловаУст(слМодуль)
	return nil
}

//СловаКоммент --  возвращает слова комментариев
func (сам *ТСекцияКоммент) СловаКоммент() (слова map[int]мИнт.ИСлово) {
	return сам.секция.Слова()
}

//СловаМодуля -- Возвращает слова модуля
func (сам *ТСекцияКоммент) СловаМодуля() (слова map[int]мИнт.ИСлово) {
	return сам.модуль.Слова()
}
