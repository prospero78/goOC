package пакКоорд

// модКоордИзм

/*
	Модуль описывает тип с изменяемыми координатами
*/

import (
	//пакКонс "../../../пакКонсоль"
	пакФмт "fmt"
)

//ТуКоордИзм -- тип для изменяемых координат
type ТуКоордИзм struct {
	ТуКоордФикс
}

//НовыйИзм -- возвращает новый экземпляр изменяемых координат
func НовыйИзм(пСтр ТЦелСтр, пПоз ТЦелПоз) (ки *ТуКоордИзм, ош error) {
	if кф, ош := НовыйФикс(пСтр, пПоз); ош == nil {
		ки = &ТуКоордИзм{ТуКоордФикс: *кф}
	} else {
		ош = пакФмт.Errorf("пакКоорд.НовыйИзм(): ошибка при создании базы ТуКоордФикс\n\t%v", ош)
		return nil, ош
	}
	return ки, nil
}

//ПозДоб -- увеличение координаты Поз на 1
func (сам *ТуКоордИзм) ПозДоб() {
	сам.поз++
}

//ПозСброс -- сбрасывает позицию литеры в строке в 0
func (сам *ТуКоордИзм) ПозСброс() {
	сам.поз = 0
}

//ПозУст -- устанавливает позицию литеры в строке
func (сам *ТуКоордИзм) ПозУст(пПоз ТЦелПоз) (ош error) {
	if пПоз < 0 {
		ош = пакФмт.Errorf("ТуКоордИзм.ПозУст(): отрицательный пПоз запрещён, пПоз=%v", пПоз)
		return ош
	}
	сам.поз = пПоз
	return nil
}

//СтрДоб -- увеличивает номер строки в ТуКоорд
func (сам *ТуКоордИзм) СтрДоб() {
	сам.стр++
}

//String -- для соответствия интерфейсу ИКоордФикс
func (сам *ТуКоордИзм) String() string {
	return "*ТуКоордИзм{стр:" + пакФмт.Sprintf("%v", сам.стр) + ", поз:" + пакФмт.Sprintf("%v", сам.поз) + "}"
}
