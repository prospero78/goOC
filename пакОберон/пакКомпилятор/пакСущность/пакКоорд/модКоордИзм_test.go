// модКоордФикс_test
package пакКоорд

/*
Пакет предоставляет тест для ТуКоордИзм.
*/
import (
	пакТест "testing"
)

// Тест на сохранение правильных значений и создание ТуКоордФикс
func TestСтр1и(тест *пакТест.T) {
	_Позитив := func() {
		ки, ош := КоордИзмНов(1, 0)
		if ки == nil {
			тест.Errorf("п1 Ошибка при создании ТКоордИзм\n\t%v", ош)
		}
		if ош != nil {
			тест.Errorf("п2 Ошибка при создании *ТуКоордИзм\n %v", ош)
		}
		if ки.Стр.Знач() != 1 {
			тест.Errorf("п3 Значение ТуКоордИзм.Стр()=1 не равно 1 (минимальное для номера строки)")
		}
	}
	_Негатив := func() {
		// Тест на сопротивление 0-строке (должна быть минимум 1)
		ки, ош := КоордИзмНов(0, 0)
		if ош == nil {
			тест.Errorf("Неверное создание *ТуКоордИзм: строка не может иметь № 0")
		}
		if ки.Стр.Знач() == 0 { // При правильной работе прокатывать не должно
			тест.Errorf("Значение ТуКоордИзм.Стр()=0 не может быть равно 0")
		}
	}
	_Позитив()
	_Негатив()
}

// Тест на сопротивление отрицательному номеру строки (должна быть минимум 1)
func TestСтр3и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(-1, 0)
	if ош == nil {
		тест.Errorf("Неверное создание *ТуКоордИзм: строка не может иметь № -1")
	}
	if ки.Стр.Знач() == -1 { // При правильной работе прокатывать не должно
		тест.Errorf("Значение ТуКоордИзм.Стр()=-1 не может быть равно 0")
	}
}

// Тест на присвоение правильных значений и создание ТуКоордФикс
func TestСтр4и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(5, 0)
	if ош != nil {
		тест.Errorf("Ошибка при создании *ТуКоордИзм\n %v", ош)
	}
	ки.Стр.Доб()
	ки.Стр.Доб()
	if ки.Стр.Знач() != 7 {
		тест.Errorf("Значение ТуКоордИзм.Стр()=7 не равно 7 (должен быть такой номера строки)")
	}
}

// Тест на сохранении номера позиции (должен быть минимум 0)
func TestПоз1и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(1, 10)
	if ош != nil {
		тест.Errorf("Неверное создание *ТуКоордИзм: позиция в строке")
	}
	if ки.Поз.Знач() != 10 { // При правильной работе прокатывать не должно
		тест.Errorf("Значение ТуКоордИзм.Поз()=10 не равно 10")
	}
}

// Тест на сопротивление отрицательного номера позиции (должен быть минимум 0)
func TestПоз2и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(1, -5)
	if ош == nil {
		тест.Errorf("Неверное создание *ТуКоордИзм: позиция в строке не может быть отрицательной")
	}
	if ош == nil && ки.Поз.Знач() == -5 { // При правильной работе прокатывать не должно
		тест.Errorf("Значение ТуКоордИзм.Поз()=-5 как отрицательное недопустимо")
	}
}

// Тест на увеличение номера позиции (должен быть минимум 0)
func TestПоз3и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(1, 3)
	if ош != nil {
		тест.Errorf("Неверное создание *ТуКоордИзм: при правильных исходных данных")
	}
	ки.Поз.Доб()
	ки.Поз.Доб()
	if ки.Поз.Знач() != 5 { // При правильной работе прокатывать не должно
		тест.Errorf("Значение ТуКоордИзм.Поз()=5 не равно5 при увеличении")
	}
}

// Тест на присваивание отрицательного номера позиции (должен быть минимум 0)
func TestПоз4и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(1, 3)
	if ош != nil {
		тест.Errorf("Неверное создание *ТуКоордИзм: при правильных исходных данных")
	}
	if ош = ки.Поз.Уст(-20); ош == nil { // При правильной работе прокатывать не должно
		тест.Errorf("Нет возврата ошибки при отрицательном присовении ТуКоордИзм.Поз_Уст(-20) -- пПоз не может быть отрицательным")
	}
}

// Тест на присваивание и сохранение номера позиции (должен быть минимум 0)
func TestПоз5и(тест *пакТест.T) {
	ки, ош := КоордИзмНов(1, 3)
	if ош != nil {
		тест.Errorf("Неверное создание *ТуКоордИзм: при правильных исходных данных")
	}
	ош = ки.Поз.Уст(21)
	if ки.Поз.Знач() != 21 { // При правильной работе прокатывать не должно
		тест.Errorf("Значение ТуКоордИзм.Поз()=21 не равно 21 при присвоении")
	}
}
