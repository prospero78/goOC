package пакИсходникФайл

/*
	Модуль предоставляет тип для чтения файла и записи его же.
*/

import (
	мКонс "../../../../пакКонсоль"
	//мОш "../../../пакСущность/пакОшибка"

	мФмт "fmt"
	мОс "os"
	//пакУтф "unicode/utf8"
)

//ТИсхФайл -- тип для работы с исходным файлом
type ТИсхФайл struct {
	размер int
	текст  string
}

//ИсхФайлНов -- возвращает ссылку на новый ТИсхФайл
func ИсхФайлНов() (файл *ТИсхФайл, ош error) {
	мКонс.Конс.Отладить("пакИсхФайл.Новый()")
	файл = &ТИсхФайл{}
	if файл == nil {
		return nil, мФмт.Errorf("ИсхФайлНов(): нет памяти?\n")
	}

	return файл, nil
}

//Считать -- читает исходный файл
func (сам *ТИсхФайл) Считать(пИмяФайла string) {
	мКонс.Конс.Отладить("ТИсхФайл.Считать()")
	if пИмяФайла == "" {
		пИмяФайла = "Hello.o7"
	}
	файл, _ := мОс.Open(пИмяФайла)
	defer файл.Close()
	// Размер файла в байтах
	размер, _ := файл.Stat()

	// Массив байт под размер текста
	текст := make([]byte, размер.Size())

	// Считали текст в байтовый срез
	_, _ = файл.Read(текст)

	// Строка по размеру байтов
	сам.текст = string(текст)

	сам.размер = len([]rune(сам.текст))
}

//Лит -- Возвращает литеру по номеру руны
func (сам *ТИсхФайл) Лит(пПоз int) (лит string, ош error) {
	if пПоз < 0 {
		return "", мФмт.Errorf("ТИсхФайл.Лит(): указатель литеры пПоз не может быть < 0\n")
	}
	if пПоз >= сам.размер {
		return "", мФмт.Errorf("ТИсхФайл.Лит(): указатель литеры пПоз больше последней литеры, пПоз=%v",пПоз)
	}
	текст := []rune(сам.текст)
	лит = string(текст[пПоз])
	return лит, nil
}

//Исходник -- возвращает полностью исходный текст в отдельном срезе рун
func (сам *ТИсхФайл) Исходник() (текст string) {
	//сам.конс.Отладить("ццц " + string(сам.текст) + " длина: " + пакФмт.Sprint("", len(сам.текст)))
	текст = сам.текст
	//copy(текст, сам.текст)
	return текст
}

//ИсхПечать -- печатает исходный файл
func (сам *ТИсхФайл) ИсхПечать() {
	мКонс.Конс.Печать(string(сам.текст))
}
