// модИсходник
package пакИсходник

/*
Пакет предоставляет тип для работы с исходным файлом.
Позволяет текст считывать целиком, в другой части позволяет работать с
отдельными строками по номерам.
*/
import (
	пакКонс "../../../пакКонсоль"
	пакКоорд "../../пакСущность/пакКоорд"
	пакСлово "../../пакСущность/пакСлово"
	пакИсхСтр "./пакИсходникСтроки"
	пакИсхФайл "./пакИсходникФайл"
)

type ТуИсходник struct {
	конс         *пакКонс.ТуКонсоль    // ссылка на глобальную консоль
	ИсхФайл      *пакИсхФайл.ТуИсхФайл // содержимое файла исходника целиком
	ИсхСтр       *пакИсхСтр.ТуИсхСтр   // исходник построчно
	Коорд        *пакКоорд.ТуКоордИзм  // изменяемые координаты
	СловаМодуля  []*пакСлово.ТуСлово   // срез слов
	бСловаГотово bool                  // признак готовности на разделения на слова
	__цПоз       int                   // текущая позиция в исходном тексте
}

func Новый() (исх *ТуИсходник) {
	пакКонс.Конс.Отладить("пакИсходник.Новый()")
	исх = new(ТуИсходник)
	исх.конс = пакКонс.Конс
	исх.ИсхФайл = пакИсхФайл.Новый()
	исх.ИсхСтр = пакИсхСтр.Новый()
	исх.Коорд = пакКоорд.НовыйИзм()
	return исх
}

func (сам *ТуИсходник) Обработать(пИмяФайла string) {
	сам.конс.Отладить("ТуИсходник.Обработать()")
	сам.ИсхФайл.Считать(пИмяФайла)
	//сам.конс.Отладить("ffff @" + string(сам.ИсхФайл.Исходник()) + "@")
	сам.ИсхСтр.НаСтроки_Разбить(сам.ИсхФайл.Исходник())
}

// Добавляет слово с атрибутами положения в исходном тексте
// Строки исходника остаются как были.
func (сам *ТуИсходник) __Слово_Добавить(пНомСтр, пНомПоз int, пСлово string) {
	слово := пакСлово.Новое(пНомСтр, пНомПоз, пСлово)
	сам.СловаМодуля = append(сам.СловаМодуля, слово)
	сам.Коорд.Поз_Добав()
}

// Разделяет исходник на слова
func (сам *ТуИсходник) __НаСлова_Разделить() {
	for {
		if сам.бСловаГотово {
			break
		}
		сам.__Слово_Выделить()
	}
}

// Выделяет слово из исходного текста
func (сам *ТуИсходник) __Слово_Выделить() {
	Пробел := func(пЛит string) {
		if пЛит == " " {
			сам.Коорд.Поз_Добав()
		}
	}
	цИсхДлина := len(сам.ИсхФайл.Исходник()) - 1
	лит := ""
	if сам.__цПоз < цИсхДлина {
		лит = сам.ИсхФайл.Лит(сам.__цПоз)
		Пробел(лит)
	}
}
