// модКоммент
package пакКоммент

/*
Выделение комментариев необходимо для (возможного) дальнейшего анализа
комментариев на наличие опций компилятора.
Это псевдосекция.
*/

import (
	пакКонс "../../../пакКонсоль"
	пакСлово "../../пакСущность/пакСлово"
	пакФмт "fmt"
)

type ТуКоммент struct {
	_слова        []*пакСлово.ТуСлово
	_слова_модуля []*пакСлово.ТуСлово
}

func Новый() (коммент *ТуКоммент, ош error) {
	пакКонс.Конс.Отладить("пакСекции.пакКоммент.Новый()")
	коммент = &ТуКоммент{}
	return коммент, ош
}

// Главный обработчик секции
func (сам *ТуКоммент) Обработать(пСловаМодуля []*пакСлово.ТуСлово) (ош error) {
	цНомерИсх, цУровень := 0, 0
	слКоммент := []*пакСлово.ТуСлово{}
	слМодуль := []*пакСлово.ТуСлово{}
	for цНомерИсх = 0; цНомерИсх < len(пСловаМодуля); цНомерИсх++ {
		слово := пСловаМодуля[цНомерИсх]
		//пакКонс.Конс.Отладить("Слово: " + слово.Строка())
		if слово.Строка() == "(*" {
			цУровень++
			//пакКонс.Конс.Отладить("Уровень комментов: " + пакФмт.Sprintf("%v", цУровень))
		}
		if слово.Строка() == "*)" {
			цУровень--
			//пакКонс.Конс.Отладить("Уровень комментов: " + пакФмт.Sprintf("%v", цУровень))
		}
		if цУровень == 0 && слово.Строка() != "*)" {
			слМодуль = append(слМодуль, слово)
		} else if слово.Строка() != "(*" && слово.Строка() != "*)" {
			слКоммент = append(слКоммент, слово)
		}
	}
	if цУровень != 0 {
		ош = пакФмт.Errorf("ТуКоммент.Обработать(): уровень комментариев на сбалансирован, уровень = %v", цУровень)
		return ош
	}
	пакКонс.Конс.Отладить(пакФмт.Sprintf("Итоговый уровень комментов > [%v].   Всего слов > [%v].", цУровень, len(слКоммент)))
	пакКонс.Конс.Отладить(пакФмт.Sprintf("Слов модуля: %v   Всего слов в модуле: %v", len(слМодуль), len(слКоммент)+len(слМодуль)))
	сам._слова = слКоммент
	сам._слова_модуля = слМодуль
	return ош
}

// Реализация методов интерфейса ИСекция
func (сам *ТуКоммент) Слова() (слова *[]*пакСлово.ТуСлово) {
	return &сам._слова
}

// Реализация методов интерфейса ИСекция
func (сам *ТуКоммент) Слова_Уст(слова []*пакСлово.ТуСлово) {
}

// Возвращает слова модуля
func (сам *ТуКоммент) Слова_Модуля() (слова *[]*пакСлово.ТуСлово) {
	return &сам._слова_модуля
}
