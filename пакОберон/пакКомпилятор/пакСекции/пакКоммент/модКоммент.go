package пакКоммент

// модКоммент

/*
	Выделение комментариев необходимо для (возможного) дальнейшего анализа
	комментариев на наличие опций компилятора.
	Это псевдосекция.
*/

import (
	мКонс "../../../пакКонсоль"
	мСлово "../../пакСущность/пакСлово"
	мСекция "../пакСекция"
	мФмт "fmt"
)

//ТКоммент -- тип псевдосекции со словами комментария
type ТКоммент struct {
	секция мСекция.ТСекция
	модуль мСекция.ТСекция
}

//Новый -- возвращает новый экземпляр типа псевдосекции комментариев
func Новый() (коммент *ТКоммент, ош error) {
	мКонс.Конс.Отладить("пакСекции.пакКоммент.Новый()")
	секция := мСекция.Новый("КОММЕНТ")
	модуль := мСекция.Новый("МОДУЛЬ")
	коммент = &ТКоммент{
		секция: *секция,
		модуль: *модуль,
	}
	return коммент, ош
}

//Обработать -- главный обработчик секции
func (сам *ТКоммент) Обработать(пСловаМодуля []*мСлово.ТСлово) (ош error) {
	цНомерИсх, цУровень := 0, 0
	слКоммент := []*мСлово.ТСлово{}
	слМодуль := []*мСлово.ТСлово{}
	for цНомерИсх = 0; цНомерИсх < len(пСловаМодуля); цНомерИсх++ {
		слово := пСловаМодуля[цНомерИсх]
		//пакКонс.Конс.Отладить("Слово: " + слово.Строка())
		стрСлово, ош := слово.Строка()
		if ош != nil {
			ош = мФмт.Errorf("ТуКоммент.Обработать(): ошибка1 при проверке слова\n\t%v", ош)
			return ош
		}
		if стрСлово == "(*" {
			цУровень++
			continue
			//пакКонс.Конс.Отладить("Уровень комментов: " + мФмт.Sprintf("%v", цУровень))
		}
		стрСлово, ош = слово.Строка()
		if ош != nil {
			ош = мФмт.Errorf("ТуКоммент.Обработать(): ошибка2 при проверке слова\n\t%v", ош)
			return ош
		}
		if стрСлово == "*)" {
			цУровень--
			continue
		}
		//пакКонс.Конс.Отладить("Уровень комментов: " + мФмт.Sprintf("%v", цУровень))
		стрСлово, ош = слово.Строка()
		if ош != nil {
			ош = мФмт.Errorf("ТуКоммент.Обработать(): ошибка3 при проверке слова\n\t%v", ош)
			return ош
		}
		//Заполнение словарей в зависимости от уровня комментариев
		if цУровень == 0 {
			слМодуль = append(слМодуль, слово)
		} else {
			слКоммент = append(слКоммент, слово)
		}
	}
	if цУровень != 0 {
		ош = мФмт.Errorf("ТуКоммент.Обработать(): уровень комментариев на сбалансирован, уровень = %v", цУровень)
		return ош
	}
	мКонс.Конс.Отладить(мФмт.Sprintf("Итоговый уровень комментов > [%v].   Всего слов > [%v].", цУровень, len(слКоммент)))
	мКонс.Конс.Отладить(мФмт.Sprintf("Слов модуля: %v   Всего слов в модуле: %v", len(слМодуль), len(слКоммент)+len(слМодуль)))
	сам.секция.СловаУст(слКоммент)
	сам.модуль.СловаУст(слМодуль)
	return nil
}

//СловаКоммент --  возвращает слова комментариев
func (сам *ТКоммент) СловаКоммент() (слова []*мСлово.ТСлово) {
	return сам.секция.Слова()
}

//СловаМодуля -- Возвращает слова модуля
func (сам *ТКоммент) СловаМодуля() (слова []*мСлово.ТСлово) {
	return сам.модуль.Слова()
}
