package пакКоммент

// модКоммент

/*
	Выделение комментариев необходимо для (возможного) дальнейшего анализа
	комментариев на наличие опций компилятора.
	Это псевдосекция.
*/

import (
	пакКонс "../../../пакКонсоль"
	пакСлово "../../пакСущность/пакСлово"
	пакФмт "fmt"
)

//ТуКоммент -- тип псевдосекции со словами комментария
type ТуКоммент struct {
	_слова      []*пакСлово.ТуСлово
	словаМодуля []*пакСлово.ТуСлово
}

//Новый -- возвращает новый экземпляр типа псевдосекции комментариев
func Новый() (коммент *ТуКоммент, ош error) {
	пакКонс.Конс.Отладить("пакСекции.пакКоммент.Новый()")
	коммент = &ТуКоммент{}
	return коммент, ош
}

//Обработать -- главный обработчик секции
func (сам *ТуКоммент) Обработать(пСловаМодуля []*пакСлово.ТуСлово) (ош error) {
	цНомерИсх, цУровень := 0, 0
	слКоммент := []*пакСлово.ТуСлово{}
	слМодуль := []*пакСлово.ТуСлово{}
	for цНомерИсх = 0; цНомерИсх < len(пСловаМодуля); цНомерИсх++ {
		слово := пСловаМодуля[цНомерИсх]
		//пакКонс.Конс.Отладить("Слово: " + слово.Строка())
		if стрСлово, ош := слово.Строка(); ош == nil {
			if стрСлово == "(*" {
				цУровень++
				//пакКонс.Конс.Отладить("Уровень комментов: " + пакФмт.Sprintf("%v", цУровень))
			}
		} else {
			ош = пакФмт.Errorf("ТуКоммент.Обработать(): ошибка1 при проверке слова\n\t%v", ош)
			return ош

		}
		if стрСлово, ош := слово.Строка(); ош == nil {
			if стрСлово == "*)" {
				цУровень--
			}
			//пакКонс.Конс.Отладить("Уровень комментов: " + пакФмт.Sprintf("%v", цУровень))
		} else {
			ош = пакФмт.Errorf("ТуКоммент.Обработать(): ошибка2 при проверке слова\n\t%v", ош)
			return ош
		}
		if стрСлово, ош := слово.Строка(); ош == nil {
			if цУровень == 0 && стрСлово != "*)" {
				слМодуль = append(слМодуль, слово)
			} else if стрСлово != "(*" && стрСлово != "*)" {
				слКоммент = append(слКоммент, слово)
			}
		} else {
			ош = пакФмт.Errorf("ТуКоммент.Обработать(): ошибка3 при проверке слова\n\t%v", ош)
			return ош
		}
	}
	if цУровень != 0 {
		ош = пакФмт.Errorf("ТуКоммент.Обработать(): уровень комментариев на сбалансирован, уровень = %v", цУровень)
		return ош
	}
	пакКонс.Конс.Отладить(пакФмт.Sprintf("Итоговый уровень комментов > [%v].   Всего слов > [%v].", цУровень, len(слКоммент)))
	пакКонс.Конс.Отладить(пакФмт.Sprintf("Слов модуля: %v   Всего слов в модуле: %v", len(слМодуль), len(слКоммент)+len(слМодуль)))
	сам._слова = слКоммент
	сам.словаМодуля = слМодуль
	return nil
}

//Слова -- реализация методов интерфейса ИСекция, возвращает слова комментариев
func (сам *ТуКоммент) Слова() (слова *[]*пакСлово.ТуСлово) {
	return &сам._слова
}

//СловаУст -- Реализация методов интерфейса ИСекция
func (сам *ТуКоммент) СловаУст(слова []*пакСлово.ТуСлово) {
}

//СловаМодуля -- Возвращает слова модуля
func (сам *ТуКоммент) СловаМодуля() (слова *[]*пакСлово.ТуСлово) {
	return &сам.словаМодуля
}
