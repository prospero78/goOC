package пакСекции

/*
	Модуль предоставляет тип для описания секции
*/

import (
	мКонс "../../пакКонсоль"
	мСлово "../пакСущность/пакСлово"
	мИмпорт "./пакИмпорт"
	мКоммент "./пакКоммент"
	пакМодуль "./пакМодуль" //пакСекция "./пакСекция"
	мФмт "fmt"
)

//ТСекции -- тип содержащий в себе все секции (со словами)
type ТСекции struct {
	коммент  *мКоммент.ТКоммент
	модуль   *пакМодуль.ТМодуль
	импорт   *мИмпорт.ТИмпорт
	СлИмпорт []*мСлово.ТСлово
	СлМодуль []*мСлово.ТСлово
}

//Новый -- возвращает новый экземпляр типа секций (с секциями для хранения слов)
func Новый() (секции *ТСекции, ош error) {
	мКонс.Конс.Отладить("пакСекции.Новый()")
	секции = &ТСекции{}
	if секции.коммент, ош = мКоммент.Новый(); ош != nil {
		ош = мФмт.Errorf("ТСекции.Новый(): ошибка при создании ТКоммент\n\t%v", ош)
		return секции, ош
	}

	if секции.модуль, ош = пакМодуль.Новый(); ош != nil {
		ош = мФмт.Errorf("ТСекции.Новый(): ошибка при создании ТМодуль\n\t%v", ош)
		return секции, ош
	}
	if секции.импорт, ош = мИмпорт.Новый(); ош != nil {
		ош = мФмт.Errorf("ТСекции.Новый(): ошибка при создании ТИмпорт\n\t%v", ош)
		return секции, ош
	}
	return секции, nil
}

//Обработать -- главный цикл обработки слов модуля -- разбитие на секции
func (сам *ТСекции) Обработать(пСловаМодуля []*мСлово.ТСлово) (ош error) {
	if ош = сам.коммент.Обработать(пСловаМодуля); ош == nil {
		//сам.СлМодуль = make([]*мСлово.ТСлово, len(*сам.модуль.Слова()))
		сам.СлМодуль = сам.коммент.СловаМодуля()
	} else {
		return ош
	}

	//мКонс.Конс.Печать("Слова секции комментариев:")
	//пакСекция.СловаПечать(сам.коммент)

	if ош = сам.модуль.Обработать(сам.СлМодуль); ош == nil {
		сам.СлМодуль = сам.модуль.СловаМодуля()
	} else {
		return ош
	}
	// Сюда все слова передаются, но ошибка( Надо проверять, что там есть.
		мКонс.Конс.Печать(мФмт.Sprintf("========================\n\tСлова модуля: всего слов: %v", len(сам.модуль.СловаМодуля())))
	//пакСекция.СловаПечать(сам.модуль)

	if ош = сам.импорт.Обработать(сам.СлМодуль); ош == nil {
		сам.СлИмпорт = сам.импорт.СловаСекции()
		сам.СлМодуль = сам.импорт.СловаМодуля()
	} else {
		return ош
	}
	мКонс.Конс.Печать("Слова секции импорта:")
	сам.импорт.СловаИмпортПечать()

	return nil
}
