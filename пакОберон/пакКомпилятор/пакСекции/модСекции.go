// модСекции
package пакСекции

import (
	пакКонс "../../пакКонсоль"
	пакСлово "../пакСущность/пакСлово"
	пакИмпорт "./пакИмпорт"
	пакМодуль "./пакМодуль"
	пакФмт "fmt"
)

type ТуСекции struct {
	модуль   *пакМодуль.ТуМодуль
	импорт   *пакИмпорт.ТуИмпорт
	СлИмпорт []*пакСлово.ТуСлово
	СлМодуль []*пакСлово.ТуСлово
}

func Новый() (секции *ТуСекции, ош error) {
	пакКонс.Конс.Отладить("пакСекции.Новый()")
	секции = &ТуСекции{}
	if секции.модуль, ош = пакМодуль.Новый(); ош != nil {
		ош = пакФмт.Errorf("ТуСекции.Новый(): ошибка при создании ТуМодуль\n\t%v", ош)
		return секции, ош
	}
	if секции.импорт, ош = пакИмпорт.Новый(); ош != nil {
		ош = пакФмт.Errorf("ТуСекции.Новый(): ошибка при создании ТуИмпорт\n\t%v", ош)
		return секции, ош
	}
	return секции, ош
}

// Главный цикл обработки слов модуля -- разбитие на секции
func (сам *ТуСекции) Обработать(пСловаМодуля []*пакСлово.ТуСлово) (ош error) {
	if ош := сам.модуль.Обработать(пСловаМодуля); ош != nil {
		return ош
	} else {
		сам.СлМодуль = make([]*пакСлово.ТуСлово, len(*сам.модуль.Слова()))
		copy(*сам.модуль.Слова(), сам.СлМодуль)
	}

	if слИмпорт, слМодуль, ош := сам.импорт.Обработать(пСловаМодуля); ош != nil {
		return ош
	} else {
		сам.СлИмпорт = make([]*пакСлово.ТуСлово, len(слИмпорт))
		copy(слИмпорт, сам.СлИмпорт)

		сам.СлМодуль = make([]*пакСлово.ТуСлово, len(слМодуль))
		copy(слМодуль, сам.СлМодуль)
	}
	return ош
}
