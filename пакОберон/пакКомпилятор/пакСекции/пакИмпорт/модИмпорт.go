// модИмпорт
package пакИмпорт

/*
Модуль предоставляет тип для анализа секции импорта
*/
import (
	пакКонс "../../../пакКонсоль"
	пакСлово "../../пакСущность/пакСлово"
	пакСекция "../пакСекция"
	пакФмт "fmt"
)

type ТуИмпорт struct {
	_слова        *[]*пакСлово.ТуСлово
	_слова_модуля *[]*пакСлово.ТуСлово
	бИмпорт       bool // Указатель на то, что есть секция импорта
}

func Новый() (импорт *ТуИмпорт, ош error) {
	пакКонс.Конс.Отладить("пакСекции.пакИмпорт.Новый()")
	импорт = &ТуИмпорт{}
	return импорт, ош
}

// Главная функция обработки секции импорт
func (сам *ТуИмпорт) Обработать(пСловаМодуля []*пакСлово.ТуСлово) (ош error) {
	пакКонс.Конс.Отладить("ТуИмпорт.Обработать()")
	сам._слова = &пСловаМодуля
	сам._слова_модуля = &пСловаМодуля
	сам.__ЕслиИмпорт()
	if ош := сам.__ЕслиИмпорт_Ограничен(); ош != nil {
		ош = пакФмт.Errorf("ТуИмпорт.Обработать(): ошибка при проверке ограничения секции импорта\n\t%v", ош)
		return ош
	}
	return ош
}

func (сам *ТуИмпорт) __ЕслиИмпорт() {
	слово := (*сам._слова_модуля)[0]
	for _, слИмпорт := range пакСлово.КсИмпорт {
		if слово.Строка() == слИмпорт {
			сам.бИмпорт = true
			пакСекция.Слова_Обрезать(сам)
		}
	}
}

func (сам *ТуИмпорт) __ЕслиИмпорт_Ограничен() (ош error) {
	цСловоНом := 0
	слово := (*сам._слова_модуля)[0]
	бДальше := слово.Строка() != ";"
	for бДальше && (цСловоНом < len(*сам._слова_модуля)) {
		цСловоНом++
		слово = (*сам._слова_модуля)[цСловоНом]
		бДальше = слово.Строка() != ";"
	}
	if бДальше {
		ош = пакФмт.Errorf("ТуИмпорт.__ЕслиИмпорт_Ограничен(): секция импорта ничем не ограничена")
		return ош
	}
	пакСекция.Конец_Уст(сам)
	return ош
}

func (сам *ТуИмпорт) Слова() (слова *[]*пакСлово.ТуСлово) {
	return сам._слова_модуля
}

// Возвращает слова импорта
func (сам *ТуИмпорт) Слова_Импорт() (слова *[]*пакСлово.ТуСлово) {
	return сам._слова
}

// Устанавлиает слова после обрезки секции слов
func (сам *ТуИмпорт) Слова_Уст(слова []*пакСлово.ТуСлово) {
	сам._слова = &слова
}
