// модИмпорт
package пакИмпорт

/*
Модуль предоставляет тип для анализа секции импорта
*/
import (
	пакКонс "../../../пакКонсоль"
	пакСлово "../../пакСущность/пакСлово"

	//"fmt"
	пакСекция "../пакСекция"
)

type ТуИмпорт struct {
	_слова        *[]*пакСлово.ТуСлово
	_слова_модуля *[]*пакСлово.ТуСлово
	бИмпорт       bool // Указатель на то, что есть секция импорта
}

func Новый() (импорт *ТуИмпорт, ош error) {
	пакКонс.Конс.Отладить("пакСекции.пакИмпорт.Новый()")
	импорт = &ТуИмпорт{}
	return импорт, ош
}

// Главная функция обработки секции импорт
func (сам *ТуИмпорт) Обработать(пСловаМодуля []*пакСлово.ТуСлово) (ош error) {
	сам._слова = &пСловаМодуля
	сам._слова_модуля = &пСловаМодуля
	сам.__ЕслиИмпорт()
	return ош
}

func (сам *ТуИмпорт) __ЕслиИмпорт() {
	слово := (*сам._слова_модуля)[0]
	for _, слИмпорт := range пакСлово.КсИмпорт {
		if слово.Строка() == слИмпорт {
			сам.бИмпорт = true
			пакСекция.Слова_Обрезать(сам)
		}
	}
}

func (сам *ТуИмпорт) Слова() (слова *[]*пакСлово.ТуСлово) {
	return сам._слова
}

// Возвращает слова модуля
func (сам *ТуИмпорт) Слова_Модуля() (слова *[]*пакСлово.ТуСлово) {
	return сам._слова_модуля
}

// Устанавлиает слова после обрезки секции слов
func (сам *ТуИмпорт) Слова_Уст(слова []*пакСлово.ТуСлово) {
	сам._слова = &слова
}
