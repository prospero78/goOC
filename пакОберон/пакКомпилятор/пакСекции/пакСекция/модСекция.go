package пакСекция

// модСекция

/*
	Модуль предоставляет интерфейс (общий для всех секций)
*/

import (
	пакСлово "../../пакСущность/пакСлово"
	пакФмт "fmt"
)

// ИСекция -- общий интерфейс длявсех типов секций
type ИСекция interface {
	Секция() string
	СловаСекции() *[]*пакСлово.ТуСлово
	СловаМодуля() *[]*пакСлово.ТуСлово

	СловаСекцииУст([]*пакСлово.ТуСлово)
	//СловаСекцииПолучить(секция ИСекция)
}

// СловаОбрезать -- обрезает слова в секции
func СловаСекцииОбрезать(секция ИСекция) {
	слова := *секция.СловаСекции()
	слова = слова[1:]
	секция.СловаСекцииУст(слова)
}

// СловаПечать -- Печатает все слова секции
func СловаСекцииПечать(секция ИСекция) (ош error) {
	итер := 0
	стр := ""
	for _, слово := range *секция.СловаСекции() {
		if стрСлово, ош := слово.Строка(); ош == nil {
			с := пакФмт.Sprintf("%v) %10.12v    ", слово.Номер(), стрСлово)
			стр = стр + с
			итер++
			if итер == 3 {
				стр += "\n"
				пакФмт.Printf(стр)
				стр = ""
				итер = 0
			}
		} else {
			ош = пакФмт.Errorf("пакСекция.СловаПечать(): ошибка при получении значения слова\n\t%v", ош)
			return ош
		}

	}
	return nil
}

//КонецУст -- Устанавливает слово-маркер -- конец секции
func КонецУст(секция ИСекция) {

}

//СловаСекцииПолучить -- разделяет слова своей секции и слова модуля (оставшиеся)
func СловаСекцииПолучить(секция ИСекция) {

}
