package пакКоорд

/*
	Модуль предоставляет тип для операций с номером строки.
*/

import (
	мФмт "fmt"
	мСинх "sync"
)

//СНомерСтр -- специальный целочисленный тип для хранения номера строки исходника
type СНомерСтр int

//ИНомерСтр -- интерфейс для операций с типом номера строки исходника
type ИНомерСтр interface {
	Уст(СНомерСтр) error
	Знач() СНомерСтр
	String() string
}

//ИНомерСтрИзм -- интерфейс для операций с типом номера строки исходника
type ИНомерСтрИзм interface {
	ИНомерСтр
	Доб()
}

//ТНомерСтр -- тип для операций с номером строки
type ТНомерСтр struct {
	знач     СНомерСтр
	стрНомер string
	блок     мСинх.Mutex
}

//НомерСтрИзмНов -- возвращает ссылку на новый ИНомерСтрИзм
func НомерСтрИзмНов() (номер ИНомерСтрИзм, ош error) {
	_номер := &ТНомерСтр{}
	if _номер == nil {
		return nil, мФмт.Errorf("НомерСтрНов(): нет памяти на новый номер строки исходника?\n")
	}
	_номер.стрНомер = "0"
	return _номер, nil
}

//НомерСтрНов -- возвращает ссылку на новый ИНомерСтр
func НомерСтрНов() (номер ИНомерСтр, ош error) {
	номер, ош = НомерСтрИзмНов()
	return номер, nil
}

//Уст -- устанавливает номер строки исходника
func (сам *ТНомерСтр) Уст(пНомер СНомерСтр) (ош error) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if сам.знач != 0 {
		panic(мФмт.Errorf("ТНомерСтр.Уст(): ОШИБКА номер строки уже установлен, знач=[%v], пНомер=[%v]\n", сам.знач, пНомер))
	}
	if пНомер <= 0 {
		panic(мФмт.Errorf("ТНомерСтр.Уст(): ОШИБКА значение меньше 1, пНомер=[%v]\n", пНомер))
	}
	сам.знач = пНомер
	сам.стрНомер = мФмт.Sprintf("%v", пНомер)
	return nil
}

//Знач -- возвращает хранимое значение номера строки
func (сам *ТНомерСтр) Знач() СНомерСтр {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	return сам.знач
}

func (сам *ТНомерСтр) String() string {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	return сам.стрНомер
}


//Доб -- увеличивает номер строки на +1
func (сам *ТНомерСтр) Доб() {
	сам.знач++
}
