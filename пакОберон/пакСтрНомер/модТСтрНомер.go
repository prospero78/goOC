package пакСтрНомер

/*
	Модуль предоставляет тип для операций с номером строки.
*/

import (
	мФмт "fmt"
	мСинх "sync"
)

//ССтрНомер -- специальный целочисленный тип для хранения номера строки исходника
type ССтрНомер int

//ИСтрНомер -- интерфейс для операций с типом номера строки исходника
type ИСтрНомер interface {
	Уст(ССтрНомер) error
	Знач() ССтрНомер
	String() string
}

//ИСтрНомерИзм -- интерфейс для операций с типом номера строки исходника
type ИСтрНомерИзм interface {
	ИСтрНомер
	Доб()
	Сброс()
}

//тСтрНомер -- тип для операций с номером строки
type тСтрНомер struct {
	знач     ССтрНомер
	стрНомер string
	блок     мСинх.Mutex
}

//СтрНомерИзмНов -- возвращает ссылку на новый ИСтрНомерИзм
func СтрНомерИзмНов() (номер ИСтрНомерИзм, ош error) {
	_номер := &тСтрНомер{}
	if _номер == nil {
		return nil, мФмт.Errorf("СтрНомерИзмНов(): нет памяти на новый номер строки исходника?\n")
	}
	_номер.стрНомер = "0"
	return _номер, nil
}

//СтрНомерНов -- возвращает ссылку на новый ИСтрНомер
func СтрНомерНов() (номер ИСтрНомер, ош error) {
	номер, ош = СтрНомерИзмНов()
	return номер, nil
}

//Уст -- устанавливает номер строки исходника
func (сам *тСтрНомер) Уст(пНомер ССтрНомер) (ош error) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if сам.знач != 0 {
		return мФмт.Errorf("тСтрНомер.Уст(): ОШИБКА номер строки уже установлен, знач=[%v], пНомер=[%v]\n", сам.знач, пНомер)
	}
	if пНомер <= 0 {
		return мФмт.Errorf("тСтрНомер.Уст(): ОШИБКА значение меньше 1, пНомер=[%v]\n", пНомер)
	}
	сам.знач = пНомер
	сам.стрНомер = мФмт.Sprintf("%v", пНомер)
	return nil
}

//Знач -- возвращает хранимое значение номера строки
func (сам *тСтрНомер) Знач() ССтрНомер {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	return сам.знач
}

func (сам *тСтрНомер) String() string {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	return сам.стрНомер
}

//Доб -- увеличивает номер строки на +1
func (сам *тСтрНомер) Доб() {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	сам.знач++
	сам.стрНомер = мФмт.Sprintf("%v", сам.знач)
}

func (сам *тСтрНомер) Сброс() {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	сам.знач = 1
	сам.стрНомер = "1"
}
