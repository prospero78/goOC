package пакСтрНомер

/*
	Модуль предоставляет тип изменяемого номера строки
*/

import (
	мФмт "fmt"
	мСинх "sync"
)

//ИСтрНомерИзм -- интерфейс для операций с типом номера строки исходника
type ИСтрНомерИзм interface {
	ИСтрНомерФикс
	Уст(ССтрНомер) error
	Доб()
	Сброс()
}

//Тип для операций с фиксированным номером строки
type тСтрНомерИзм struct {
	знач     ССтрНомер
	стрНомер string
	блок     мСинх.RWMutex
}

//СтрНомерИзмНов -- возвращает ссылку на новый ИСтрНомерИзм
func СтрНомерИзмНов(пСтр ССтрНомер) (номер ИСтрНомерИзм, ош error) {
	_номер := тСтрНомерИзм{}
	if ош = _номер.Уст(пСтр); ош != nil {
		return nil, мФмт.Errorf("СтрНомерИзмНов(): ОШИБКА в начальном присвоении номера строки\n\t%v", ош)
	}
	return &_номер, nil
}

//Установка единственный раз значения номера строки
func (сам *тСтрНомерИзм) Уст(пНомер ССтрНомер) (ош error) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if пНомер <= 0 {
		return мФмт.Errorf("тСтрНомерИзм.Уст(): ОШИБКА значение меньше 1, пНомер=[%v]\n", пНомер)
	}
	сам.знач = пНомер
	сам.стрНомер = мФмт.Sprintf("%v", пНомер)
	return nil
}

//Знач -- возвращает хранимое значение номера строки
func (сам *тСтрНомерИзм) Получ() ССтрНомер {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.знач
}

func (сам *тСтрНомерИзм) String() string {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.стрНомер
}

//Доб -- увеличивает номер строки на +1
func (сам *тСтрНомерИзм) Доб() {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	сам.знач++
	сам.стрНомер = мФмт.Sprintf("%v", сам.знач)
}

func (сам *тСтрНомерИзм) Сброс() {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	сам.знач = 1
	сам.стрНомер = "1"
}
