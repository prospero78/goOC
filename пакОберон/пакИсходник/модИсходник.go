package пакИсходник

/*
	Пакет предоставляет тип для работы с исходным файлом.
	Позволяет текст считывать целиком, в другой части позволяет работать с
	отдельными строками по номерам.
*/

import (
	мАбс "../пакАбстракция"
	мИсхСтр "../пакИсходникСтроки"
	мИсхФайл "../пакИсходникФайл"
	мКонс "../пакКонсоль"
	мКоорд "../пакКоорд"
	мРес "../пакРесурс"
	мСлово "../пакСлово"
	мФмт "fmt"
)

//ТИсходник -- тип для считывания исходника и разбиения его на строки
type ТИсходник struct {
	ИсхФайл      мАбс.АИсхФайл       // содержимое файла исходника целиком
	ИсхСтр       мАбс.АИсхСтроки     // исходник построчно
	Коорд        мАбс.АКоордИзм      // изменяемые координаты
	слова        map[int]мАбс.АСлово // справочник слов
	бСловаГотово bool                // признак готовности на разделения на слова
	цСтр         мАбс.СКоордСтр      // текущая строка в исходном тексте
	литНомер     мАбс.СЛитНомер      // текущая позиция в исходном тексте
}

//ИсходникНов -- возвращает ссылку на новый ТИсходник
func ИсходникНов() (исх *ТИсходник, ош error) {
	мКонс.Конс.Отладить("пакИсходник.Новый()")
	исх = &ТИсходник{}
	if исх == nil {
		return nil, мФмт.Errorf("ИсходникНов(): нет памяти?\n")
	}
	if исх.ИсхФайл, ош = мИсхФайл.ИсхФайлНов(); ош != nil {
		return nil, мФмт.Errorf("ИсходникНов(): ошибка присоздании ТИсхФайл\n\t%v", ош)
	}
	исх.ИсхСтр = мИсхСтр.Новый()
	if исх.Коорд, ош = мКоорд.КоордИзмНов(1, 0); ош != nil {
		return nil, мФмт.Errorf("пакТсходник.Новый(): ошибка при добавлении координат\n\t%v", ош)
	}
	исх.слова = make(map[int]мАбс.АСлово)
	return исх, nil
}

//Обработать -- главный цикл чтения и разбиения на строки исходника
func (сам *ТИсходник) Обработать(пИмяФайла мАбс.СИсхФайл) (ош error) {
	мКонс.Конс.Отладить("ТИсходник.Обработать()")
	if ош = сам.ИсхФайл.Считать(пИмяФайла); ош != nil {
		return мФмт.Errorf("ТИсходник.Обработать(): ошибка при чтении файа исходника\n\t%v", ош)
	}
	//сам.конс.Отладить("ffff @" + string(сам.ИсхФайл.Исходник()) + "@")
	сам.ИсхСтр.НаСтрокиРазбить(сам.ИсхФайл.Исходник())
	if ош = сам._НаСловаРазделить(); ош != nil {
		return мФмт.Errorf("ТИсходник.Обработать(): ошибка при обработке исходника\n\t%v", ош)
	}
	return nil
}

// Добавляет слово с атрибутами положения в исходном тексте
// Строки исходника остаются как были.
func (сам *ТИсходник) _СловоДобав(пСлово мАбс.ССлово) (ош error) {
	крдФикс, _ := мКоорд.КоордНов(сам.Коорд.Стр(), сам.Коорд.Поз())
	if слово, ош := мСлово.СловоНов(крдФикс, пСлово, сам.ИсхСтр.Строка(сам.Коорд.Стр())); ош == nil {
		if слово == nil {
			мКонс.Конс.Отладить("________  ТуСлово =   nil     !!!")
			return мФмт.Errorf("ТИсходник._СловоДобав(): ошибка при создании ТуСлово\n\t%v", ош)
		}
		сам.Коорд.ПозДоб()
		сам.слова[len(сам.слова)] = слово
		//сам.конс.Отладить("Слово № " + мФмт.Sprintf("%d", слово.Номер()) + "=\"" + пСлово + "\"")
	} else {
		return мФмт.Errorf("ТуИсходник._СловоДобав(): ошибка при добавлении ТуСлово\n\t%v", ош)
	}
	return nil
}

// Разделяет исходник на слова
func (сам *ТИсходник) _НаСловаРазделить() (ош error) {
	мКонс.Конс.Отладить("ТуИсходник._НаСловаРазделить()")
	for {
		if сам.бСловаГотово {
			мКонс.Конс.Отладить(мФмт.Sprintf("ТИсходник._СловоДобав(): всего слов: [%v]\n", len(сам.слова)))
			break
		} else {
			сам._СловоВыделить()
		}
	}
	return nil
}

// Выделяет слово из исходного текста
func (сам *ТИсходник) _СловоВыделить() (ош error) {
	Пробел := func(пЛит мАбс.СЛит) {
		if пЛит == " " {
			сам.Коорд.ПозДоб()
		} else if пЛит == "\t" {
			for i := 0; i < мРес.ШирТаба; i++ {
				сам.Коорд.ПозДоб()
			}
		}
	}
	Запятая := func(пЛит мАбс.СЛит) {
		if пЛит == "," {
			сам._СловоДобав(",")
		}
	}
	ТочкаЗапятая := func(пЛит мАбс.СЛит) {
		if пЛит == ";" {
			сам._СловоДобав(";")
		}
	}
	Плюс := func(пЛит мАбс.СЛит) {
		if пЛит == "+" {
			сам._СловоДобав("+")
		}
	}
	Минус := func(пЛит мАбс.СЛит) {
		if пЛит == "-" {
			сам._СловоДобав("-")
		}
	}
	Деление := func(пЛит мАбс.СЛит) {
		if пЛит == "/" {
			сам._СловоДобав("/")
		}
	}
	ЛеваяСкобка := func(пЛит мАбс.СЛит) (ош error) {
		if пЛит == "(" {
			лит1, ош := сам.ИсхФайл.Лит(сам.литНомер + 1)
			if ош != nil {
				return мФмт.Errorf("ЛеваяСкобка(): ошибка при получении литеры\n\t%v", ош)
			}
			if пЛит+лит1 != "(*" {
				сам._СловоДобав("(")
			} else {
				сам._СловоДобав("(*")
				сам.Коорд.ПозДоб()
				сам.литНомер++
			}
		}
		return nil
	}
	ПраваяСкобка := func(пЛит мАбс.СЛит) {
		if пЛит == ")" {
			сам._СловоДобав(")")
		}
	}
	НоваяСтрока := func(пЛит мАбс.СЛит) {
		if пЛит == "\n" {
			сам.Коорд.СтрДоб()
			сам.Коорд.ПозСброс()
		}
	}
	Умножить := func(пЛит мАбс.СЛит) (ош error) {
		if пЛит == "*" {
			лит1, ош := сам.ИсхФайл.Лит(сам.литНомер + 1)
			if ош != nil {
				return мФмт.Errorf("Умножить(): ошибка при получении литеры\n\t%v", ош)
			}
			if пЛит+лит1 != "*)" {
				сам._СловоДобав("*")
			} else {
				сам._СловоДобав("*)")
				сам.Коорд.ПозДоб()
				сам.литНомер++
			}
		}
		return nil
	}
	Двоеточие := func(пЛит мАбс.СЛит) (ош error) {
		if пЛит == ":" {
			лит1, ош := сам.ИсхФайл.Лит(сам.литНомер + 1)
			if ош != nil {
				return мФмт.Errorf("Двоеточие(): ошибка при получении литеры\n\t%v", ош)
			}
			if пЛит+лит1 != ":=" {
				сам._СловоДобав(":")
			} else {
				сам._СловоДобав(":=")
				сам.Коорд.ПозДоб()
				сам.литНомер++
			}
		}
		return nil
	}
	ПереводКаретки := func(пЛит мАбс.СЛит) {
		if пЛит == "\r" {
			сам.Коорд.ПозДоб()
			//сам.__цПоз++
		}
	}
	ЕслиСущность := func(пЛит мАбс.СЛит) (ош error) {
		слово := мАбс.ССлово("")
		// это что-то строковое
		if пЛит == "_" || мСлово.ЕслиБуква(пЛит) {
			var бДальше bool
			for {
				рез, ош := мСлово.Цифра.ЕслиЦифра(пЛит)
				if ош != nil {
					panic(мФмт.Errorf("ТИсходник._СловоВыделить(): ошибка при распознании литеры [%v]\n\t%v", пЛит, ош))
				}
				бДальше = (пЛит != ".") && (мСлово.ЕслиБуква(пЛит) || пЛит == "_" || рез)
				if бДальше {
					слово += мАбс.ССлово(пЛит)
					сам.литНомер++
					сам.Коорд.ПозДоб()
					пЛит, ош = сам.ИсхФайл.Лит(сам.литНомер)
					if ош != nil {
						return мФмт.Errorf("ЕслиСущность(): ошибка при получении литеры\n\t%v", ош)
					}
				} else {
					// откат на одну позицию
					сам.литНомер--
					сам.Коорд.ПозУст(сам.Коорд.Поз() - мАбс.СКоордПоз(len(слово)))
					if слово == "." {
						мКонс.Конс.Отладить("________  сущн_стр =   ТОЧКА     !!!")
					}
					//сам.конс.Отладить("Сущность=\"" + сущн + "\"")
					сам._СловоДобав(слово)
					сам.Коорд.ПозУст(сам.Коорд.Поз() + мАбс.СКоордПоз(len(слово)) - 1)
					return nil
				}
			}
			// Это что-то числовое
		} else {
			рез, ош := мСлово.Цифра.ЕслиЦифра(пЛит)
			if ош != nil {
				panic(мФмт.Errorf("ТИсходник._СловоВыделить(): ошибка при распознании цифры [%v]\n\t%v", пЛит, ош))
			}
			if рез {
				var бДальше bool
				for {
					бДальше, ош = мСлово.Цифра.ЕслиЦифра(пЛит)
					if ош != nil {
						panic(мФмт.Errorf("ТИсходник._СловоВыделить(): ошибка при распознании литеры [%v]\n\t%v", пЛит, ош))
					}
					if бДальше {
						слово += мАбс.ССлово(пЛит)
						сам.литНомер++
						сам.Коорд.ПозДоб()
						пЛит, ош = сам.ИсхФайл.Лит(сам.литНомер)
						if ош != nil {
							return мФмт.Errorf("ЕслиСущность(): ошибка при полчении литеры\n\t%v", ош)
						}
					} else {
						// откат на одну позицию
						сам.литНомер--
						if слово != "." {
							сам.Коорд.ПозУст(сам.Коорд.Поз() - мАбс.СКоордПоз(len(слово)))
							if слово == "." {
								мКонс.Конс.Отладить("________  сущн_цифра =   ТОЧКА     !!!")
								//сам.конс.Отладить("Сущность=\"" + сущн + "\"")
							}
							сам._СловоДобав(слово)
							сам.Коорд.ПозУст(сам.Коорд.Поз() + мАбс.СКоордПоз(len(слово)) - 1)
						}
						return nil
					}
				}
			}
		}
		return nil
	}
	Равно := func(пЛит мАбс.СЛит) {
		if пЛит == "=" {
			сам._СловоДобав("=")
		}
	}
	Точка := func(пЛит мАбс.СЛит) {
		if пЛит == "." {
			сам._СловоДобав(".")
		}
	}
	Кавычка2 := func(пЛит мАбс.СЛит) (ош error) { // вычисляет строки
		if пЛит == "\"" {
			слово := мАбс.ССлово("\"")
			пЛит = ""
			for {
				if пЛит != "\"" {
					сам.литНомер++
					сам.Коорд.ПозДоб()
					пЛит, ош := сам.ИсхФайл.Лит(сам.литНомер)
					if ош != nil {
						return мФмт.Errorf("Кавычка2(): ошибка при получении литеры\n\t%v", ош)
					}
					слово += мАбс.ССлово(пЛит)
				} else {
					break
				}
			}
			сам._СловоДобав(слово)
			сам.Коорд.ПозДоб()
			сам.литНомер++
		}
		return nil
	}

	//сам.конс.Отладить("ТуИсходник.__Слово_Выделить()")
	цИсхДлина := мАбс.СЛитНомер(len([]rune(сам.ИсхФайл.Исходник())) - 1)
	лит := мАбс.СЛит("")
	if сам.литНомер < цИсхДлина {
		лит, ош = сам.ИсхФайл.Лит(сам.литНомер)
		if ош != nil {
			return мФмт.Errorf("_СловоВыделить(): ошибка при получении слова\n\t%v", ош)
		}
		//сам.конс.Отладить("Лит=" + лит)
		Пробел(лит)
		Запятая(лит)
		ТочкаЗапятая(лит)
		Плюс(лит)
		Минус(лит)
		Деление(лит)
		ЛеваяСкобка(лит)
		ПраваяСкобка(лит)
		НоваяСтрока(лит)
		Умножить(лит)
		Двоеточие(лит)
		ПереводКаретки(лит)
		Равно(лит)
		Точка(лит)
		ЕслиСущность(лит)
		Кавычка2(лит)
		сам.литНомер++
	} else {
		сам.бСловаГотово = true
	}
	return nil
}

//Слова -- возвращает все распознанные слова в исходнике
func (сам *ТИсходник) Слова() map[int]мАбс.АСлово {
	return сам.слова
}
