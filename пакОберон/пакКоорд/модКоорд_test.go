package пакКоорд

/*
	Модуль предоставляет тест для ИКоорд
*/

import (
	мТест "testing"
)

const (
	номСтр = 5
	позСтр = 20
)

var (
	коордИзм  ИКоордИзм
	коордФикс ИКоордФикс
	ош        error
)

func TestКоордФикс(тест *мТест.T) {
	_Позитив := func() {
		{ //10 Создание ИКоорд
			тест.Logf("п10 Создание ИКоордФикс\n")
			if коордФикс, ош = КоордФиксНов(номСтр, позСтр); ош != nil {
				тест.Errorf("п10.1 ОШИБКА при создании ИКоордФикс\n\t%v", ош)
			}
			if коордФикс == nil {
				тест.Errorf("п10.2 ОШИБКА коордФикс не может быть nil\n")
			}
		}
		{ //11 Проверка начального состояния
			тест.Logf("п11 Проверка начальных значений\n")
			if коордФикс.СтрПоз() != позСтр {
				тест.Errorf("п11.1 ОШИБКА в хранени начального состояния позиции в строке(%v), знач=[%v]\n", позСтр, коордИзм.СтрПоз())
			}
			if коордФикс.СтрНомер() != номСтр {
				тест.Errorf("п12.2 ОШИБКА при хранении начального состояния номера строки(%v), знач=[%v]\n", номСтр, коордИзм.СтрНомер())
			}
		}
		{ //12 Проверка на строку
			тест.Logf("п12 Проверка на строку\n")
			if коордФикс.String() != "Коорд: стр=5 поз=20" {
				тест.Errorf("п12.1 ОШИБКА при получении строкового представления, знач=[%v]\n", коордФикс)
			}
		}
	}
	_Негатив := func() {
		{ //5 Создание с неправильной строкой
			тест.Logf("н5 Создание ИКоордФикс с нправильным номером строки\n")
			if коордФикс, ош = КоордФиксНов(0, позСтр); ош == nil {
				тест.Errorf("н5.1 ОШИБКА при создании ИКоордФикс\n")
			}
			if коордФикс != nil {
				тест.Errorf("н5.2 ОШИБКА коордФикс должен быть nil\n")
			}
		}
		{ //6 Создание с неправильной позицией в строке
			тест.Logf("н6 Создание ИКоордФикс с нправильным номером строки\n")
			if коордФикс, ош = КоордФиксНов(номСтр, -1); ош == nil {
				тест.Errorf("н6.1 ОШИБКА при создании ИКоордФикс\n")
			}
			if коордФикс != nil {
				тест.Errorf("н6.2 ОШИБКА коордФикс должен быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}

func TestКоордИзм(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание ИКоордИзм
			тест.Logf("п1 Создание ИКоордИзм\n")
			if коордИзм, ош = КоордИзмНов(номСтр, позСтр); ош != nil {
				тест.Errorf("п1.1 ОШИБКА при создании ИКоордИзм\n\t%v", ош)
			}
			if коордИзм == nil {
				тест.Errorf("п1.2 ОШИБКА коордИзм не может быть nil\n")
			}
		}
		{ //2 Проверка начального состояния
			тест.Logf("п2 Проверка начальных значений\n")
			if коордИзм.СтрПоз() != позСтр {
				тест.Errorf("п2.1 ОШИБКА в хранени начального состояния позиции в строке(%v), знач=[%v]\n", позСтр, коордИзм.СтрПоз())
			}
			if коордИзм.СтрНомер() != номСтр {
				тест.Errorf("п2.2 ОШИБКА при хранении начального состояния номера строки(%v), знач=[%v]\n", номСтр, коордИзм.СтрНомер())
			}
		}
		{ //3 Сброс строки
			тест.Logf("п3 Сброс номера строки\n")
			коордИзм.СтрНомерСброс()
			if коордИзм.СтрНомер() != 1 {
				тест.Errorf("п3.1 ОШИБКА при хранении номера строки после сброса(1), знач=[%v]\n", коордИзм.СтрНомер())
			}

		}
		{ //4 Сброс номера
			тест.Logf("п3 Сброс позиции в строке\n")
			коордИзм.СтрПозСброс()
			if коордИзм.СтрПоз() != 0 {
				тест.Errorf("п4.1 ОШИБКА при хранении позиции в строке после сброса(1), знач=[%v]\n", коордИзм.СтрПоз())
			}
		}
		{ //5 Установка номера строки
			тест.Logf("п5 Установка номера строки\n")
			if ош = коордИзм.СтрНомерУст(номСтр); ош != nil {
				тест.Errorf("п5.1 ОШИБКА при установке номера строки\n\t%v", ош)
			}
			if коордИзм.СтрНомер() != номСтр {
				тест.Errorf("п5.2 ОШИБКА при хранении номера строки после установки(%v), знач=[%v]\n", номСтр, коордИзм.СтрНомер())
			}
		}
		{ //6 Установка позиции в строке
			тест.Logf("п6 Установка позиции в строке\n")
			if ош = коордИзм.СтрПозУст(позСтр); ош != nil {
				тест.Errorf("п6.1 ОШИБКА при установке позиции в строке\n\t%v", ош)
			}
			if коордИзм.СтрПоз() != позСтр {
				тест.Errorf("п6.2 ОШИБКА при хранении позиции в строке после установки(%v), знач=[%v]\n", позСтр, коордИзм.СтрПоз())
			}
		}
		{ //7 Добавление номера строки
			тест.Logf("п5 Добавление номера строки\n")
			коордИзм.СтрНомерДоб()
			if коордИзм.СтрНомер() != номСтр+1 {
				тест.Errorf("п7.1 ОШИБКА при хранении номера строки после добавления(%v), знач=[%v]\n", номСтр+1, коордИзм.СтрНомер())
			}
		}
		{ //8 Доавление позиции в строке
			коордИзм.СтрПозДоб()
			if коордИзм.СтрПоз() != позСтр+1 {
				тест.Errorf("п8.1 ОШИБКА при хранении позиции в строке после добавления(%v), знач=[%v]\n", позСтр+1, коордИзм.СтрПоз())
			}
		}
		{ //9 Проверка на строку
			тест.Logf("п9 Проверка на строку\n")
			if коордИзм.String() != "Коорд: стр=6 поз=21" {
				тест.Errorf("п9.1 ОШИБКА при получении строкового представления, знач=[%v]\n", коордИзм)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание с неправильной строкой
			тест.Logf("н1 Создание ИКоордИзм с нправильным номером строки\n")
			if коордИзм, ош = КоордИзмНов(0, позСтр); ош == nil {
				тест.Errorf("н1.1 ОШИБКА при создании ИКоордИзм\n")
			}
			if коордИзм != nil {
				тест.Errorf("н1.2 ОШИБКА коордИзм должен быть nil\n")
			}
		}
		{ //2 Создание с неправильной позицией в строке
			тест.Logf("н1 Создание ИКоордИзм с нправильным номером строки\n")
			if коордИзм, ош = КоордИзмНов(номСтр, -1); ош == nil {
				тест.Errorf("н2.1 ОШИБКА при создании ИКоордИзм\n")
			}
			if коордИзм != nil {
				тест.Errorf("н2.2 ОШИБКА коордИзм должен быть nil\n")
			}
		}
		{ //3 Неправильная установка номера строки
			коордИзм, _ = КоордИзмНов(номСтр, позСтр)
			тест.Logf("н3 Неправильная установка номера строки\n")
			if ош = коордИзм.СтрНомерУст(0); ош == nil {
				тест.Errorf("н3.1 ОШИБКА при установке номера строки\n")
			}
			if коордИзм.СтрНомер() != номСтр {
				тест.Errorf("н3.2 ОШИБКА при хранении номера строки после установки(%v), знач=[%v]\n", номСтр, коордИзм.СтрНомер())
			}
		}
		{ //4 Неправильная установка позиции в строке
			тест.Logf("н4 Неправильная установка позиции в строке\n")
			if ош = коордИзм.СтрПозУст(-1); ош == nil {
				тест.Errorf("н4.1 ОШИБКА при установке позиции в строке\n")
			}
			if коордИзм.СтрПоз() != позСтр {
				тест.Errorf("н4.2 ОШИБКА при хранении позиции в строке после установки(%v), знач=[%v]\n", позСтр, коордИзм.СтрПоз())
			}
		}
	}
	_Позитив()
	_Негатив()
}
