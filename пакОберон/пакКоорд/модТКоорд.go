package пакКоорд

/*
	Модуль предоставляет тип фиксированной координаты.
	Т.е. в процессе использования этот тип изменяться не может.
*/

import (
	мФмт "fmt"
	мИнт "github.com/prospero78/goOC/пакОберон/пакИнтерфейсы"
)

//ТКоорд -- тип для хранения фиксированных координат
type ТКоорд struct {
	стр мИнт.СКоордСтр
	поз мИнт.СКоордПоз
}

//КоордНов -- возвращает новый экземпляр фиксированных координат
func КоордНов(пСтр мИнт.СКоордСтр, пПоз мИнт.СКоордПоз) (коорд *ТКоорд, ош error) {
	коорд = &ТКоорд{}
	if коорд == nil {
		return nil, мФмт.Errorf("КоордНов(): нет памяти?")
	}
	if ош = коорд._СтрУст(пСтр); ош != nil {
		return nil, мФмт.Errorf("КоордНов(): ошибка при создании номера строки\n\t%v", ош)
	}
	if ош = коорд._ПозУст(пПоз); ош != nil {
		return nil, мФмт.Errorf("КоордНов(): ошибка при создании позиции в в строке\n\t%v", ош)
	}
	return коорд, nil
}

func (сам *ТКоорд) _СтрУст(пСтр мИнт.СКоордСтр) error {
	if !(1 <= пСтр) {
		return мФмт.Errorf("ТКоорд._СтрУст(): пСтр вне допустимого диапазона (1..), пСтр=[%v]", пСтр)
	}
	сам.стр = пСтр
	return nil
}

func (сам *ТКоорд) _ПозУст(пПоз мИнт.СКоордПоз) error {
	if !(0 <= пПоз) {
		return мФмт.Errorf("ТКоорд._ПозУст(): пПоз вне допустимого диапазона (0..), пПоз=[%v]", пПоз)
	}
	сам.поз = пПоз
	return nil
}

//Возвращает строковое представление координаты
func (сам *ТКоорд) String() string {
	return мФмт.Sprintf("Коорд: стр=%v поз=%v", сам.стр, сам.поз)
}

//Стр -- возвращает номер строки
func (сам *ТКоорд) Стр() мИнт.СКоордСтр {
	return сам.стр
}

//Поз -- возвращает позицию в строке
func (сам *ТКоорд) Поз() мИнт.СКоордПоз {
	return сам.поз
}
