package пакСканер

/*
	Предоставляет тип сканера для обработки текста на входе.
	Сканер служит для первичного сканирования текста.
	Он же проверяет правильность поступления слов из исходного текста.
*/

import (
	мФмт "fmt"
	мИнт "github.com/prospero78/goOC/пакОберон/пакИнтерфейсы"
	мИсх "github.com/prospero78/goOC/пакОберон/пакИсходник"
	мКонс "github.com/prospero78/goOC/пакОберон/пакКонсоль"
	мКонст "github.com/prospero78/goOC/пакОберон/пакКонстанта"
	мОш "github.com/prospero78/goOC/пакОберон/пакОшибка"
)

//ТСканер -- тип распознаёт слова в исходнике
type ТСканер struct {
	импорт []мИнт.ИСлово
	Импорт []мИнт.ИСлово
	Ош     *мОш.ТОшибка
	Конст  []*мКонст.ТКонстанта
	исх    мИнт.ИИсходник
}

//СканерНов -- возвращает ссылку на новый ТСканер
func СканерНов() (сканер *ТСканер, ош error) {
	мКонс.Конс.Отладить("СканерНов()")
	сканер = &ТСканер{}
	if сканер == nil {
		return nil, мФмт.Errorf("СканерНов(): нет памяти?")
	}
	if сканер.исх, ош = мИсх.ИсходникНов(); ош != nil {
		return nil, мФмт.Errorf("СканерНов(): ошибка при создании ТуИсходник\n\t%v", ош)
	}
	if сканер.Ош, ош = мОш.ОшибкаНов("ТСканер"); ош != nil {
		return nil, мФмт.Errorf("СканерНов(): ошибка при создании ТОшибка\n\t%v", ош)
	}
	return сканер, nil
}

//Обработать -- выполняет обработку исходника
func (сам *ТСканер) Обработать(пИмяФайла мИнт.СИсхФайл) (ош error) {
	мКонс.Конс.Отладить("ТСканер.Обработать()")
	if ош = сам.исх.Обработать(пИмяФайла); ош != nil {
		return мФмт.Errorf("ТСканер.Обработать(): ошибка при обработке исходника\n\t%v", ош)
	}
	return nil
}

//Слова -- возвращает все слова в модуле
func (сам *ТСканер) Слова() map[мИнт.ССловоНомерМодуль]мИнт.ИСлово {
	return сам.исх.Слова()
}
