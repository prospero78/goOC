package пакИсходникСтроки

// модИсходникСтроки

/*
	Пакет предоставляет тип, который хранит построчно исходник.
	К строке можно обратиться по номеру, или полностью получить массив строк
*/

import (
	//пакФмт "fmt"
	мСтр "strings"

	мКонс "github.com/prospero78/goOC/пакОберон/пакКонсоль"
	мИнт "github.com/prospero78/goOC/пакОберон/пакИнтерфейсы"
)

//ТИсхСтрока -- специальный строковый тип для хранения итроки исходного кода
type ТИсхСтрока string

//ИИсхСтроки -- интерфейс для исходника разбитого построчно
type ИИсхСтроки interface {
	НаСтрокиРазбить(мИф.СИсхТекст)
	Строка(СКоордСтр) СИсхСтрока
}

//ТИсхСтроки -- тип хранит список исходных строк
type ТИсхСтроки struct {
	стрСписок []string
}

//Новый -- возвращает экземпляр тимпа для хранения строк исходника
func Новый() (исхСтр *ТИсхСтроки) {
	исхСтр = new(ТИсхСтроки)
	return исхСтр
}

//НаСтрокиРазбить -- разбивает на строки содержимое строки
func (сам *ТИсхСтроки) НаСтрокиРазбить(пИсх мИнт.СИсхТекст) {
	мКонс.Конс.Отладить("ТИсхСтроки.НаСтроки_Разбить()")
	сам.стрСписок = мСтр.Split(string(пИсх), "\n")

	for итер, стр := range сам.стрСписок {
		if len(стр) > 1 {
			стр = стр[:len(стр)-1]
			сам.стрСписок[итер] = стр
		}
		//сам.конс.Печать(пакФмт.Sprintf("%v: %v", итер, сам.стрСписок[итер]))
	}
}

//Строка -- возвращает строку по указанному номеру
func (сам *ТИсхСтроки) Строка(пНомер мИнт.СКоордСтр) (стр мИнт.СИсхСтрока) {
	if пНомер < 1 || пНомер > мИнт.СКоордСтр(len(сам.стрСписок)) {
		panic("ТИсхСтроки.Строка(пНомер): пНомер за пределами разрешённого диапазона строк")
	}
	return мИнт.СИсхСтрока(сам.стрСписок[пНомер-1])
}
