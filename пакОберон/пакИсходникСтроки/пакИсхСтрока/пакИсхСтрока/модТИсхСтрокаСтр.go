package пакИсхСтрокаСтр

/*
	Модуль предоставляет тип для безопасного хранения
	строки исходного кода
*/

import (
	мФмт "fmt"
	мСинх "sync"
)

//СИсхСтрока -- специальный строковый тип для хранения строки исходника
type СИсхСтрока string

//ИИсхСтрокаСтр - интерфейс к исходной строке
type ИИсхСтрокаСтр interface {
	Получ() СИсхСтрока
	Уст(СИсхСтрока)
}

//тИсхСтрокаСтр -- тип для хранения строки исходного кода
type тИсхСтрокаСтр struct {
	знач СИсхСтрока
	блок мСинх.RWMutex
}

//ИсхСтрокаСтрНов -- возвращает ссылку на новый ИИсхСтрокаСтр
func ИсхСтрокаСтрНов(пСтр СИсхСтрока) (стр ИИсхСтрокаСтр, ош error) {
	_стр := &тИсхСтрокаСтр{}
	if _стр == nil {
		return nil, мФмт.Errorf("ИсхСтрокаСтрНов(): нет памяти для типа строки исходника?\n")
	}
	_стр.знач = пСтр
	return стр, nil
}

//Получ -- возвращает хранимое значение строки исходника тИсхСтрокаСтр
func (сам *тИсхСтрокаСтр) Получ() СИсхСтрока {
	return сам.знач
}

//Уст -- устанавливает хранимое значение строки исходника тИсхСтрокаСтр
func (сам *тИсхСтрокаСтр) Уст(пСтр СИсхСтрока) (ош error) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if сам.знач != "" {
		return мФмт.Errorf("тИсхСтрокаСтр.Уст(): значение уже установлено, знач=[%v]\n", сам.знач)
	}
	if пСтр == "" {
		return мФмт.Errorf("тИсхСтрокаСтр.Уст(): пСтр не может быть строкой\n")
	}
	сам.знач = пСтр
	return nil
}
