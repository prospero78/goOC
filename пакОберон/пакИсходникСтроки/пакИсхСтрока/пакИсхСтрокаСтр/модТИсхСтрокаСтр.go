package пакИсхСтрокаСтр

/*
	Модуль предоставляет тип для безопасного хранения
	строки исходного кода
*/

import (
	мФмт "fmt"
	мСинх "sync"
)

//СИсхСтрокаСтр -- специальный строковый тип для хранения строки исходника
type СИсхСтрокаСтр string

//ИИсхСтрокаСтр - интерфейс к исходной строке
type ИИсхСтрокаСтр interface {
	Получ() СИсхСтрокаСтр
}

//тИсхСтрокаСтр -- тип для хранения строки исходного кода
type тИсхСтрокаСтр struct {
	знач СИсхСтрокаСтр
	блок мСинх.RWMutex
}

//ИсхСтрокаСтрНов -- возвращает ссылку на новый ИИсхСтрокаСтр
func ИсхСтрокаСтрНов(пСтр СИсхСтрокаСтр) (стр ИИсхСтрокаСтр, ош error) {
	_стр := &тИсхСтрокаСтр{}
	if _стр == nil {
		return nil, мФмт.Errorf("ИсхСтрокаСтрНов(): нет памяти для типа строки исходника?\n")
	}
	if ош = _стр._Уст(пСтр); ош != nil {
		return nil, мФмт.Errorf("ИсхСтрокаСтрНов(): ОШИБКА при установке  начального значения строки\n\t%v", ош)
	}
	return _стр, nil
}

//Получ -- возвращает хранимое значение строки исходника тИсхСтрокаСтр
func (сам *тИсхСтрокаСтр) Получ() СИсхСтрокаСтр {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.знач
}

//Уст -- устанавливает хранимое значение строки исходника тИсхСтрокаСтр
func (сам *тИсхСтрокаСтр) _Уст(пСтр СИсхСтрокаСтр) (ош error) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if пСтр == "" {
		return мФмт.Errorf("тИсхСтрокаСтрСтр.Уст(): пСтр не может быть строкой\n")
	}
	сам.знач = пСтр
	return nil
}
