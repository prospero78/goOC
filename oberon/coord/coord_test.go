package coord

/*
	Модуль предоставляет тест для ТКоорд
*/

import (
	мТест "testing"
)

const (
	номСтр = 5
	позСтр = 20
)

var (
	коорд *ТКоорд
	ош    error
)

func TestКоорд(тест *мТест.T) {
	_Позитив := func() {
		{ //10 Создание ТКоорд
			тест.Logf("п10 Создание ТКоорд\n")
			if коорд, ош = КоордНов(номСтр, позСтр); ош != nil {
				тест.Errorf("п10.1 ОШИБКА при создании ТКоорд\n\t%v", ош)
			}
			if коорд == nil {
				тест.Errorf("п10.2 ОШИБКА коорд не может быть nil\n")
			}
		}
		{ //11 Проверка начального состояния
			тест.Logf("п11 Проверка начальных значений\n")
			if коорд.СтрПоз() != позСтр {
				тест.Errorf("п11.1 ОШИБКА в хранени начального состояния позиции в строке(%v), знач=[%v]\n", позСтр, коорд.СтрПоз())
			}
			if коорд.СтрНомер() != номСтр {
				тест.Errorf("п12.2 ОШИБКА при хранении начального состояния номера строки(%v), знач=[%v]\n", номСтр, коорд.СтрНомер())
			}
		}
		{ //12 Проверка на строку
			тест.Logf("п12 Проверка на строку\n")
			if коорд.String() != "Коорд: стр=5 поз=20" {
				тест.Errorf("п12.1 ОШИБКА при получении строкового представления, знач=[%v]\n", коорд)
			}
		}
	}
	_Негатив := func() {
		{ //5 Создание с неправильной строкой
			defer func() {
				if паника := recover(); паника == nil {
					тест.Errorf("н5.1 ОШИБКА при генерации паники\n")
				}
			}()
			тест.Logf("н5 Создание ТКоорд с неправильным номером строки\n")
			if коорд, ош = КоордНов(0, позСтр); коорд != nil {
				тест.Errorf("н5.2 ОШИБКА коорд должен быть nil\n")
			}
		}
		{ //6 Создание с неправильной позицией в строке
			тест.Logf("н6 Создание ТКоорд с нправильным номером строки\n")
			if коорд, ош = КоордНов(номСтр, -1); ош == nil {
				тест.Errorf("н6.1 ОШИБКА при создании ТКоорд\n")
			}
			if коорд != nil {
				тест.Errorf("н6.2 ОШИБКА коорд должен быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}
