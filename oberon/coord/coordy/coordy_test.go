package coordy

/*
	Модуль предоставляет тест для номера строки исходника
*/

import (
	мТест "testing"
)

var (
	ном *ТСтрНомер
	ош  error
	ок  bool
)

func TestНомерСтрФикс(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание фиксированного номера строки
			тест.Logf("п1 Создание фиксированного номера строки\n")
			if ном = СтрНомерНов(10); ном == nil {
				тест.Errorf("п1.2 ОШИБКА номер строки не может быть nil\n")
			}
		}
		{ //2 Начальная проверка
			тест.Logf("п2 Проверка начальных значений\n")
			if ном.Получ() != 10 {
				тест.Errorf("п2.1 ОШИБКА номер строки должен быть 0, знач=[%v]\n", ном)
			}
			if ном.String() != "10" {
				тест.Errorf("п2.2 ОШИБКА строковое представление номера строки должен быть (0), стр=[%v]\n", ном)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание нулевого номера строки
			defer func() {
				if паника := recover(); паника == nil {
					тест.Errorf("н1.1 ОШИБКА вгенерации паники\n")
				}
			}()
			тест.Logf("н1 Создание нулевого номера строки\n")
			_ = СтрНомерНов(-1)
			if ном != nil {
				тест.Errorf("н1.2 ОШИБКА номер строки не может быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}

func TestНомерСтрИзм(тест *мТест.T) {
	_Позитив := func() {
		{ //5 Создание изменяемого номера строки
			тест.Logf("п5 Создание изменяемого номера строки\n")
			if ном = СтрНомерНов(20); ном == nil {
				тест.Errorf("п5.2 ОШИБКА ном не может быть nil\n")
			}
		}
		{ //6 Проверка начальных значений изменяемого номера строки
			тест.Logf("п6 Проверка начальных значений изменяемого номера строки\n")
			if ном.Получ() != 20 {
				тест.Errorf("п6.1 ОШИБКА номер строки должен быть 2, знач=[%v]\n", ном)
			}
			if ном.String() != "20" {
				тест.Errorf("п6.2 ОШИБКА строковое представление номера строки должен быть (2), стр=[%v]\n", ном)
			}
		}
		{ //7 Проверка присвоения изменяемого номера строки
			тест.Logf("п6 Проверка присвоения изменяемого номера строки\n")
			ном.Уст(2)
			ном.Доб()
			if ном.Получ() != 3 {
				тест.Errorf("п7.1 ОШИБКА номер строки должен быть 3, знач=[%v]\n", ном)
			}
			if ном.String() != "3" {
				тест.Errorf("п7.2 ОШИБКА строковое представление номера строки должен быть (3), стр=[%v]\n", ном)
			}
		}
		{ //6
			тест.Logf("п6 Сброс номера строки\n")
			ном.Сброс()
			if ном.Получ() != 1 {
				тест.Errorf("п6.1 ОШИБКА номер строки должен быть 1, знач=[%v]\n", ном)
			}
			if ном.String() != "1" {
				тест.Errorf("п6.2 ОШИБКА строковое представление номера строки должен быть (1), стр=[%v]\n", ном)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание нулевого номера строки
			defer func() {
				if паника := recover(); паника == nil {
					тест.Errorf("н1.1 ОШИБКА при генерации паники\n")
				}
			}()
			тест.Logf("н1 Создание нулевого номера строки\n")
			if ном = СтрНомерНов(-1); ном != nil {
				тест.Errorf("н1.2 ОШИБКА номер строки не может быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}
