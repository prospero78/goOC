package liter

/*
	Модуль предоставляет потокобезопасный тип для работы с отдельной литерой.
*/

import (
	мБукв "./flagalpha"
	мЦифр "./flagdigit"
	мСпец "./flagother"
	мФмт "fmt"
	мСинх "sync"
)

//ТЛит -- тип для работы с отдельной литерой
type ТЛит struct {
	лит   string
	класс string //Хранит класс литеры
	блок  мСинх.RWMutex
	буква *мБукв.ТФлагБуква
	цифра *мЦифр.ТФлагЦифра
	спец  *мСпец.ТФлагСпец
}

const (
	кБуква   = "буква"
	кСпецЛит = "спец"
	кЦифра   = "цифра"
)

//ЛитераНов -- возвращает указатель на новый ТЛит
func ЛитераНов() (лит *ТЛит) {
	_лит := ТЛит{
		буква: мБукв.ФлагБукваНов(),
		цифра: мЦифр.ФлагЦифраНов(),
		спец:  мСпец.ФлагСпецНов(),
	}
	return &_лит
}

// ЕслиБуква -- проверяет наличие буквы в литере
func (сам *ТЛит) ЕслиБуква() bool {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	if сам.класс == кБуква {
		return true
	}
	return false
}

// ЕслиСпецЛит -- проверяет наличие специальных литер не имеющих смысла в коде
func (сам *ТЛит) ЕслиСпецЛит() bool {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	if сам.класс == кСпецЛит {
		return true
	}
	return false
}

//ЕслиЦифра -- проверяет, что литера цифра
func (сам *ТЛит) ЕслиЦифра() bool {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	if сам.класс == кЦифра {
		return true
	}
	return false
}

//Уст -- устанавливает хранимую литеру
func (сам *ТЛит) Уст(пЛит string) {
	defer сам.блок.Unlock()
	сам.блок.Lock()
	if пЛит == "" {
		panic(мФмт.Errorf("ТЛит.Уст(): пЛит не может быть пустой\n"))
	}
	if сам.буква.Провер(пЛит) {
		сам.класс = кБуква
	} else if сам.спец.Провер(пЛит) {
		сам.класс = кСпецЛит
	} else if сам.цифра.Провер(пЛит) {
		сам.класс = кЦифра
	} else {
		panic(мФмт.Errorf("ТЛит.Уст(): ОШИБКА неизвестный класс литеры, пЛит=[%v]\n", пЛит))
	}
	сам.лит = пЛит
}

//Получ -- возвращает хранимую литеру
func (сам *ТЛит) Получ() string {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.лит
}

//Класс -- возвращает класс литеры
func (сам *ТЛит) Класс() string {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.класс
}
func (сам *ТЛит) String() string {
	defer сам.блок.RUnlock()
	сам.блок.RLock()
	return сам.лит
}
