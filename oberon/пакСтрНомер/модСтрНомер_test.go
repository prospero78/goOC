package пакСтрНомер

/*
	Модуль предоставляет тест для номера строки исходника
*/

import (
	мТест "testing"
)

var (
	номФикс ИСтрНомерФикс
	номИзм  ИСтрНомерИзм
	ош      error
	ок      bool
)

func TestНомерСтрФикс(тест *мТест.T) {
	_Позитив := func() {
		{ //1 Создание фиксированного номера строки
			тест.Logf("п1 Создание фиксированного номера строки\n")
			if номФикс, ош = СтрНомерФиксНов(10); ош != nil {
				тест.Errorf("п1.1 ОШИБКА при создании номера строки\n\t%v", ош)
			}
			if номФикс == nil {
				тест.Errorf("п1.2 ОШИБКА номер строки не может быть nil\n")
			}
		}
		{ //2 Начальная проверка
			тест.Logf("п2 Проверка начальных значений\n")
			if номФикс.Получ() != 10 {
				тест.Errorf("п2.1 ОШИБКА номер строки должен быть 0, знач=[%v]\n", номФикс)
			}
			if номФикс.String() != "10" {
				тест.Errorf("п2.2 ОШИБКА строковое представление номера строки должен быть (0), стр=[%v]\n", номФикс)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание нулевого номера строки
			тест.Logf("н1 Создание нулевого номера строки\n")
			if номФикс, ош = СтрНомерФиксНов(-1); ош == nil {
				тест.Errorf("н1.1 ОШИБКА при создании номера строки\n")
			}
			if номФикс != nil {
				тест.Errorf("н1.2 ОШИБКА номер строки не может быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}

func TestНомерСтрИзм(тест *мТест.T) {
	_Позитив := func() {
		{ //5 Создание изменяемого номера строки
			тест.Logf("п5 Создание изменяемого номера строки\n")
			if номИзм, ош = СтрНомерИзмНов(20); ош != nil {
				тест.Errorf("п5.1 ОШИБКА при создании номера строки\n\t%v", ош)
			}
			if номИзм == nil {
				тест.Errorf("п5.2 ОШИБКА номИзм не может быть nil\n")
			}
		}
		{ //6 Проверка начальных значений изменяемого номера строки
			тест.Logf("п6 Проверка начальных значений изменяемого номера строки\n")
			if номИзм.Получ() != 20 {
				тест.Errorf("п6.1 ОШИБКА номер строки должен быть 2, знач=[%v]\n", номИзм)
			}
			if номИзм.String() != "20" {
				тест.Errorf("п6.2 ОШИБКА строковое представление номера строки должен быть (2), стр=[%v]\n", номИзм)
			}
		}
		{ //7 Проверка присвоения изменяемого номера строки
			тест.Logf("п6 Проверка присвоения изменяемого номера строки\n")
			if ош = номИзм.Уст(2); ош != nil {
				тест.Errorf("п5.3 ОШИБКА при установке номера строки\n\t%v", ош)
			}
			if ош = номИзм.Уст(1); ош != nil {
				тест.Errorf("п5.4 ОШИБКА при установке номера строки\n\t%v", ош)
			}
			номИзм.Доб()
			if номИзм.Получ() != 2 {
				тест.Errorf("п5.5 ОШИБКА номер строки должен быть 2, знач=[%v]\n", номИзм)
			}
			if номИзм.String() != "2" {
				тест.Errorf("п5.6 ОШИБКА строковое представление номера строки должен быть (2), стр=[%v]\n", номИзм)
			}
		}
		{ //6
			тест.Logf("п6 Сброс номера строки\n")
			номИзм.Сброс()
			if номИзм.Получ() != 1 {
				тест.Errorf("п6.1 ОШИБКА номер строки должен быть 1, знач=[%v]\n", номИзм)
			}
			if номИзм.String() != "1" {
				тест.Errorf("п6.2 ОШИБКА строковое представление номера строки должен быть (1), стр=[%v]\n", номИзм)
			}
		}
	}
	_Негатив := func() {
		{ //1 Создание нулевого номера строки
			тест.Logf("н1 Создание нулевого номера строки\n")
			if номИзм, ош = СтрНомерИзмНов(-1); ош == nil {
				тест.Errorf("н1.1 ОШИБКА при создании номера строки\n")
			}
			if номФикс != nil {
				тест.Errorf("н1.2 ОШИБКА номер строки не может быть nil\n")
			}
		}
	}
	_Позитив()
	_Негатив()
}
